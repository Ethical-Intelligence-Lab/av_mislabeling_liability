m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# MODERATED MEDIATION
## FIRM LIABILITY
process(data = d_process, y = "firm", x = "label",
m =c("capability"), w="transparency", model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## HUMAN LIABILITY
process(data = d_process, y = "human", x = "label",
m =c("capability"), w="transparency", model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## ================================================================================================================
##                                                 END OF ANALYSIS
## ================================================================================================================
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Rename column and labels
df$cond <- df$FL_12_DO
df$cond[df$cond == "FL_35"] <- "auto_op"
# Rename column and labels
df$cond <- df$FL_12_DO
df$cond[df$cond == "FL_35"] <- "auto_op"
df$cond[df$cond == "FL_36"] <- "co_op"
df$cond[df$cond == "FL_50"] <- "auto_ft"
df$cond[df$cond == "FL_54"] <- "co_ft"
# exclusions
df |>
filter(
att_1 == 2,
att_2 == 2 ) -> df
recruited_participants <- dim(df)[1]
df |>
filter(
comp_1 == 2,
comp_2 == 4,
comp_3 == 1
) -> df
# Exclude more (based on Stuti's code)
df |>
filter((cond == 'auto_op' & comp_4 == 2 |
cond == 'auto_ft' & comp_4 == 3 |
cond == 'co_op' & comp_4 == 2   |
cond == 'co_ft' & comp_4 == 3     )) -> df
final_n <- dim(df)[1]
excluded <- recruited_participants - final_n
# Identify transparency and labels
df |>
mutate(
transparency = ifelse(grepl("op", cond), "no", "yes"),
label = ifelse(grepl("auto", cond), "auto", "co"),
) -> df
std_colnames <- c("id", "cond", "transparency", "label", "resp_soft", "resp_human",
"liable_firm", "liable_human", "capability","age", "gender", "ai_knowledge", "license")
auto_op <- df |>
filter(cond == "auto_op") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}1_[0-9]{1,}"), auto_1, age, gender, ai_knowledge_1, license)
colnames(auto_op) <- std_colnames
auto_ft <- df |>
filter(cond == "auto_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}3_[0-9]{1,}"), auto_2, age, gender, ai_knowledge_1, license)
colnames(auto_ft) <- std_colnames
co_op <- df |>
filter(cond == "co_op") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}2_[0-9]{1,}"), co_1, age, gender, ai_knowledge_1, license)
colnames(co_op) <- std_colnames
co_ft <- df |>
filter(cond == "co_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}4_[0-9]{1,}"), co_2, age, gender, ai_knowledge_1, license)
colnames(co_ft) <- std_colnames
d <- rbind(auto_ft, co_ft, co_op, auto_op)
View(co_ft)
co_ft <- df |>
filter(cond == "co_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}4_[0-9]{1,}"), co_2, age, gender, ai_knowledge_1, license)
View(co_ft)
colnames(co_ft) <- std_colnames
d <- rbind(auto_ft, co_ft, co_op, auto_op)
rm(auto_ft, co_ft, co_op, auto_op)
d |>
mutate_at(
c("resp_soft", "resp_human", "liable_firm", "liable_human", "capability",
"age", "gender", "license", "ai_knowledge"),
as.numeric
) -> d
## ================================================================================================================
##                                              PARTICIPANT CHARACTERISTICS
## ================================================================================================================
# AGE
mean(d[d$age < 150,]$age) # filtering the ones who put year
hist(d[d$age < 150,]$age, main = "Histogram of Age", xlab = "Age")
# GENDER
d |>
filter( gender < 3 ) |>
mutate(
gender_lab = ifelse(gender == 1, "male", "female"),
is_male = ifelse(gender == 1, 1, 0)
) -> gender
mean(gender$is_male)
barplot(table(gender$gender_lab), main="Participants' Gender")
rm(gender)
## ================================================================================================================
##                                              PARTICIPANT CHARACTERISTICS
## ===============================================================================================================
cronbach.alpha(d[,c("resp_human", "liable_human")])
cronbach.alpha(d[,c("resp_soft", "liable_firm")])
## ================================================================================================================
##                                              PARTICIPANT CHARACTERISTICS
## ===============================================================================================================
cronbach.alpha(d[,c("resp_human", "liable_human")])
cronbach.alpha(d[,c("resp_soft", "liable_firm")])
d |>
mutate(
human = (resp_human + liable_human)/2,
firm = (resp_soft + liable_firm)/2
) -> d
# HUMAN LIABILITY
## ANOVA
h_anova <- aov(human ~ as.factor(label) * as.factor(transparency), data = d)
summary(h_anova)
# FIRM LIABILITY
## ANOVA
f_anova <- aov(firm ~ as.factor(label) * as.factor(transparency), data = d)
summary(f_anova)
anova_stats(f_anova)
## t-tests
t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$firm,
d[d$transparency == 'yes'& d$label == 'co',]$firm, paired = FALSE)
t1
sd(d[d$transparency == 'yes'& d$label == 'auto',]$firm)
sd(d[d$transparency == 'yes'& d$label == 'co',]$firm)
t1
t2 <- t.test(d[d$transparency == 'no' & d$label == 'auto',]$firm,
d[d$transparency == 'no' & d$label == 'co',]$firm, paired = FALSE)
t2
sd(d[d$transparency == 'no'& d$label == 'auto',]$firm)
t2
sd(d[d$transparency == 'no'& d$label == 'auto',]$firm)
sd(d[d$transparency == 'no'& d$label == 'co',]$firm)
t2
cohen.d(d[d$transparency == 'no'& d$label == 'auto',]$firm,
d[d$transparency == 'no'& d$label == 'co',]$firm)
# HUMAN LIABILITY
## ANOVA
h_anova <- aov(human ~ as.factor(label) * as.factor(transparency), data = d)
summary(h_anova)
anova_stats(h_anova)
sd(d[d$transparency == 'yes'& d$label == 'auto',]$human)
sd(d[d$transparency == 'yes'& d$label == 'co',]$human)
cohen.d(d[d$transparency == 'yes'& d$label == 'auto',]$human,
d[d$transparency == 'yes'& d$label == 'co',]$human)
t1
## t-tests
t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$human,
d[d$transparency == 'yes'& d$label == 'co',]$human, paired = FALSE)
t2 <- t.test(d[d$transparency == 'no' & d$label == 'auto',]$human,
d[d$transparency == 'no' & d$label == 'co',]$human, paired = FALSE)
t2
sd(d[d$transparency == 'no' & d$label == 'auto',]$human)
sd(d[d$transparency == 'no' & d$label == 'co',]$human)
cohen.d(d[d$transparency == 'no'& d$label == 'auto',]$human,
d[d$transparency == 'no'& d$label == 'co',]$human)
sd(d[d$transparency == 'no' & d$label == 'auto',]$human)
sd(d[d$transparency == 'no' & d$label == 'co',]$human)
## t-tests
t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$human,
d[d$transparency == 'yes'& d$label == 'co',]$human, paired = FALSE)
t1
sd(d[d$transparency == 'yes'& d$label == 'auto',]$human)
sd(d[d$transparency == 'yes'& d$label == 'co',]$human)
cohen.d(d[d$transparency == 'yes'& d$label == 'auto',]$human,
d[d$transparency == 'yes'& d$label == 'co',]$human)
t2 <- t.test(d[d$transparency == 'no' & d$label == 'auto',]$human,
d[d$transparency == 'no' & d$label == 'co',]$human, paired = FALSE)
t2
sd(d[d$transparency == 'no' & d$label == 'auto',]$human)
sd(d[d$transparency == 'no' & d$label == 'co',]$human)
cohen.d(d[d$transparency == 'no'& d$label == 'auto',]$human,
d[d$transparency == 'no'& d$label == 'co',]$human)
# HUMAN LIABILITY
## ANOVA
h_anova <- aov(human ~ as.factor(label) * as.factor(transparency), data = d)
summary(h_anova)
anova_stats(h_anova)
## t-tests
t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$human,
d[d$transparency == 'yes'& d$label == 'co',]$human, paired = FALSE)
t1
## t-tests
t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$firm,
d[d$transparency == 'yes'& d$label == 'co',]$firm, paired = FALSE)
t1
# HUMAN LIABILITY
## ANOVA
h_anova <- aov(human ~ as.factor(label) * as.factor(transparency), data = d)
summary(h_anova)
anova_stats(h_anova)
## t-tests
t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$human,
d[d$transparency == 'yes'& d$label == 'co',]$human, paired = FALSE)
t1
# HUMAN LIABILITY
## ANOVA
h_anova <- aov(human ~ as.factor(label) * as.factor(transparency), data = d)
summary(h_anova)
anova_stats(h_anova)
## t-tests
### Transparent Condition
t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$human,
d[d$transparency == 'yes'& d$label == 'co',]$human, paired = FALSE)
t1
sd(d[d$transparency == 'yes'& d$label == 'auto',]$human)
sd(d[d$transparency == 'yes'& d$label == 'co',]$human)
cohen.d(d[d$transparency == 'yes'& d$label == 'auto',]$human,
d[d$transparency == 'yes'& d$label == 'co',]$human)
### Opaque Condition
t2 <- t.test(d[d$transparency == 'no' & d$label == 'auto',]$human,
d[d$transparency == 'no' & d$label == 'co',]$human, paired = FALSE)
t2
sd(d[d$transparency == 'no' & d$label == 'auto',]$human)
sd(d[d$transparency == 'no' & d$label == 'co',]$human)
cohen.d(d[d$transparency == 'no'& d$label == 'auto',]$human,
d[d$transparency == 'no'& d$label == 'co',]$human)
## ================================================================================================================
##                                                 PROCESS ANALYSIS
## ================================================================================================================
source('../process.R')
d |>
mutate_at( c("transparency", "label"), as.factor) |>
mutate_at( c("transparency", "label"), as.numeric) -> d_process
# SIMPLE MEDIATION
## FIRM LIABILITY
process(data = d_process, y = "firm", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## HUMAN LIABILITY
process(data = d_process, y = "human", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# MODERATED MEDIATION
## FIRM LIABILITY
process(data = d_process, y = "firm", x = "label",
m =c("capability"), w="transparency", model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## HUMAN LIABILITY
process(data = d_process, y = "human", x = "label",
m =c("capability"), w="transparency", model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## ================================================================================================================
##                                 Harvard Business School, Ethical Iopelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV LABEL STUDY | EXPERIMENT 4 Transparency
## ================================================================================================================
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # cooprast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"tidyverse",
"grid",
'sjstats'
)
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Rename column and labels
df$cond <- df$FL_12_DO
df$cond[df$cond == "FL_35"] <- "auto_op"
df$cond[df$cond == "FL_36"] <- "co_op"
df$cond[df$cond == "FL_50"] <- "auto_ft"
df$cond[df$cond == "FL_54"] <- "co_ft"
# exclusions
df |>
filter(
att_1 == 2,
att_2 == 2 ) -> df
recruited_participants <- dim(df)[1]
df |>
filter(
comp_1 == 2,
comp_2 == 4,
comp_3 == 1
) -> df
# Exclude more (based on Stuti's code)
df |>
filter((cond == 'auto_op' & comp_4 == 2 |
cond == 'auto_ft' & comp_4 == 3 |
cond == 'co_op' & comp_4 == 2   |
cond == 'co_ft' & comp_4 == 3     )) -> df
final_n <- dim(df)[1]
excluded <- recruited_participants - final_n
# Identify transparency and labels
df |>
mutate(
transparency = ifelse(grepl("op", cond), "no", "yes"),
label = ifelse(grepl("auto", cond), "auto", "co"),
) -> df
std_colnames <- c("id", "cond", "transparency", "label", "resp_soft", "resp_human",
"liable_firm", "liable_human", "capability","age", "gender", "ai_knowledge", "license")
auto_op <- df |>
filter(cond == "auto_op") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}1_[0-9]{1,}"), auto_1, age, gender, ai_knowledge_1, license)
colnames(auto_op) <- std_colnames
auto_ft <- df |>
filter(cond == "auto_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}3_[0-9]{1,}"), auto_2, age, gender, ai_knowledge_1, license)
colnames(auto_ft) <- std_colnames
co_op <- df |>
filter(cond == "co_op") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}2_[0-9]{1,}"), co_1, age, gender, ai_knowledge_1, license)
colnames(co_op) <- std_colnames
co_ft <- df |>
filter(cond == "co_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}4_[0-9]{1,}"), co_2, age, gender, ai_knowledge_1, license)
colnames(co_ft) <- std_colnames
d <- rbind(auto_ft, co_ft, co_op, auto_op)
rm(auto_ft, co_ft, co_op, auto_op)
d |>
mutate_at(
c("resp_soft", "resp_human", "liable_firm", "liable_human", "capability",
"age", "gender", "license", "ai_knowledge"),
as.numeric
) -> d
## ================================================================================================================
##                                              PARTICIPANT CHARACTERISTICS
## ================================================================================================================
# AGE
mean(d[d$age < 150,]$age) # filtering the ones who put year
hist(d[d$age < 150,]$age, main = "Histogram of Age", xlab = "Age")
# GENDER
d |>
filter( gender < 3 ) |>
mutate(
gender_lab = ifelse(gender == 1, "male", "female"),
is_male = ifelse(gender == 1, 1, 0)
) -> gender
mean(gender$is_male)
barplot(table(gender$gender_lab), main="Participants' Gender")
rm(gender)
## t-tests
### Transparent Condition
t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$firm,
d[d$transparency == 'yes'& d$label == 'co',]$firm, paired = FALSE)
## ================================================================================================================
##                                              PARTICIPANT CHARACTERISTICS
## ===============================================================================================================
cronbach.alpha(d[,c("resp_human", "liable_human")])
cronbach.alpha(d[,c("resp_soft", "liable_firm")])
d |>
mutate(
human = (resp_human + liable_human)/2,
firm = (resp_soft + liable_firm)/2
) -> d
# FIRM LIABILITY
## ANOVA
f_anova <- aov(firm ~ as.factor(label) * as.factor(transparency), data = d)
summary(f_anova)
anova_stats(f_anova)
## t-tests
### Transparent Condition
t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$firm,
d[d$transparency == 'yes'& d$label == 'co',]$firm, paired = FALSE)
t1
## ================================================================================================================
##                                 Harvard Business School, Ethical Iopelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV LABEL STUDY | EXPERIMENT 4 Transparency
## ================================================================================================================
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # cooprast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"tidyverse",
"grid",
'sjstats'
)
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Rename column and labels
df$cond <- df$FL_12_DO
df$cond[df$cond == "FL_35"] <- "auto_op"
df$cond[df$cond == "FL_36"] <- "co_op"
df$cond[df$cond == "FL_50"] <- "auto_ft"
df$cond[df$cond == "FL_54"] <- "co_ft"
# exclusions
df |>
filter(
att_1 == 2,
att_2 == 2 ) -> df
recruited_participants <- dim(df)[1]
df |>
filter(
comp_1 == 2,
comp_2 == 4,
comp_3 == 1
) -> df
# Exclude more (based on Stuti's code)
df |>
filter((cond == 'auto_op' & comp_4 == 2 |
cond == 'auto_ft' & comp_4 == 3 |
cond == 'co_op' & comp_4 == 2   |
cond == 'co_ft' & comp_4 == 3     )) -> df
final_n <- dim(df)[1]
excluded <- recruited_participants - final_n
# Identify transparency and labels
df |>
mutate(
transparency = ifelse(grepl("op", cond), "no", "yes"),
label = ifelse(grepl("auto", cond), "auto", "co"),
) -> df
std_colnames <- c("id", "cond", "transparency", "label", "resp_soft", "resp_human",
"liable_firm", "liable_human", "capability","age", "gender", "ai_knowledge", "license")
auto_op <- df |>
filter(cond == "auto_op") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}1_[0-9]{1,}"), auto_1, age, gender, ai_knowledge_1, license)
colnames(auto_op) <- std_colnames
auto_ft <- df |>
filter(cond == "auto_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}3_[0-9]{1,}"), auto_2, age, gender, ai_knowledge_1, license)
colnames(auto_ft) <- std_colnames
co_op <- df |>
filter(cond == "co_op") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}2_[0-9]{1,}"), co_1, age, gender, ai_knowledge_1, license)
colnames(co_op) <- std_colnames
co_ft <- df |>
filter(cond == "co_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}4_[0-9]{1,}"), co_2, age, gender, ai_knowledge_1, license)
colnames(co_ft) <- std_colnames
d <- rbind(auto_ft, co_ft, co_op, auto_op)
rm(auto_ft, co_ft, co_op, auto_op)
d |>
mutate_at(
c("resp_soft", "resp_human", "liable_firm", "liable_human", "capability",
"age", "gender", "license", "ai_knowledge"),
as.numeric
) -> d
## ================================================================================================================
##                                              PARTICIPANT CHARACTERISTICS
## ================================================================================================================
# AGE
mean(d[d$age < 150,]$age) # filtering the ones who put year
hist(d[d$age < 150,]$age, main = "Histogram of Age", xlab = "Age")
# GENDER
d |>
filter( gender < 3 ) |>
mutate(
gender_lab = ifelse(gender == 1, "male", "female"),
is_male = ifelse(gender == 1, 1, 0)
) -> gender
mean(gender$is_male)
barplot(table(gender$gender_lab), main="Participants' Gender")
rm(gender)
## ================================================================================================================
##                                              PARTICIPANT CHARACTERISTICS
## ===============================================================================================================
cronbach.alpha(d[,c("resp_human", "liable_human")])
cronbach.alpha(d[,c("resp_soft", "liable_firm")])
d |>
mutate(
human = (resp_human + liable_human)/2,
firm = (resp_soft + liable_firm)/2
) -> d
# FIRM LIABILITY
## ANOVA
f_anova <- aov(firm ~ as.factor(label) * as.factor(transparency), data = d)
summary(f_anova)
anova_stats(f_anova)
