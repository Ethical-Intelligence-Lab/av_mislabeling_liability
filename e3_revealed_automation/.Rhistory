position = position_dodge(width = 0.9),
geom = "errorbar", width = 0.2)
p2_1
##(3) HUMAN RESPONSIBILITY
p3 <- ggplot(d_merged,aes(x=factor(cond),y=human_responsibility)) +
theme_bw() +coord_cartesian(ylim=c(1,130))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto_ft", "co_ft"), c("auto_nt", "co_nt"), c("auto_ft", "co_nt"), c("auto_ft", "auto_nt"),c("auto_nt", "co_ft"), c("co_ft", "co_nt")),
test = "wilcox.test", test.args = list(exact = FALSE, alternative = "two.sided"),
map_signif_level=TRUE,y_position = c(125,120,115,110,105, 100), textsize = 3.5)
p3 <- p3 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=a_names)+
ggtitle("Perceived Human Responsibility") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
linewidth=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p3
##-----------------------------------------------------------------------------------------------------------------
p3_1 <- ggplot(d_merged, aes(x = factor(label), y = human_responsibility, fill = factor(transparency)), color = factor(transparency_conds)) +
theme_bw() +
coord_cartesian(ylim = c(1, 105)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 5))
p3_1
p3_1 <- p3_1 +
theme(text = element_text(size = 18), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_x_discrete(labels = t_names) +
ggtitle("Perceived Human Responsibility") +
scale_fill_manual(values = c("#cccccc", "#333333"), name = "Transparency:",
labels = transparency_conds, guide = guide_legend(reverse = FALSE)) +
xlab("") +
ylab("") +
theme_classic() +
theme(axis.text.x = element_text(size = 16)) +
theme(axis.text.y = element_text(size = 16)) +
theme(plot.title = element_text(size = 18, hjust = 0.5)) +
theme(legend.text = element_text(size = 16), legend.title = element_text(size = 18)) +
geom_violin(width = 0.9, alpha = 0.38, size = 0.75) +
geom_sina(alpha = 0.6, size = 0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size = 0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom = "errorbar", width = 0.2)
p3_1
##(4) Firm Liability
p4 <- ggplot(d_merged,aes(x=factor(cond),y=firm_liability)) +
theme_bw() +coord_cartesian(ylim=c(1,130))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto_ft", "co_ft"), c("auto_nt", "co_nt"), c("auto_ft", "co_nt"), c("auto_ft", "auto_nt"),c("auto_nt", "co_ft"), c("co_ft", "co_nt")),
test = "wilcox.test", test.args = list(exact = FALSE, alternative = "two.sided"),
map_signif_level=TRUE,y_position = c(125,120,115,110,105, 100), textsize = 3.5)
p4 <- p4 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=a_names)+
ggtitle("Perceived Firm Liability") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
linewidth=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p4
##-----------------------------------------------------------------------------------------------------------------
p4_1 <- ggplot(d_merged, aes(x = factor(label), y = firm_liability, fill = factor(transparency)), color = factor(transparency_conds)) +
theme_bw() +
coord_cartesian(ylim = c(1, 105)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 5))
p4_1
p4_1 <- p4_1 +
theme(text = element_text(size = 18), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_x_discrete(labels = t_names) +
ggtitle("Perceived Firm Liability") +
scale_fill_manual(values = c("#cccccc", "#333333"), name = "Transparency:",
labels = transparency_conds, guide = guide_legend(reverse = FALSE)) +
xlab("") +
ylab("") +
theme_classic() +
theme(axis.text.x = element_text(size = 16)) +
theme(axis.text.y = element_text(size = 16)) +
theme(plot.title = element_text(size = 18, hjust = 0.5)) +
theme(legend.text = element_text(size = 16), legend.title = element_text(size = 18)) +
geom_violin(width = 0.9, alpha = 0.38, size = 0.75) +
geom_sina(alpha = 0.6, size = 0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size = 0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom = "errorbar", width = 0.2)
p4_1
##(5) Human Liability
p5 <- ggplot(d_merged,aes(x=factor(cond),y=human_liability)) +
theme_bw() +coord_cartesian(ylim=c(1,130))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto_ft", "co_ft"), c("auto_nt", "co_nt"), c("auto_ft", "co_nt"), c("auto_ft", "auto_nt"),c("auto_nt", "co_ft"), c("co_ft", "co_nt")),
test = "wilcox.test", test.args = list(exact = FALSE, alternative = "two.sided"),
map_signif_level=TRUE,y_position = c(125,120,115,110,105, 100), textsize = 3.5)
p5 <- p5 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=a_names)+
ggtitle("Perceived Human Liability") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
linewidth=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p5
##-----------------------------------------------------------------------------------------------------------------
p5_1 <- ggplot(d_merged, aes(x = factor(label), y = human_liability, fill = factor(transparency)), color = factor(transparency_conds)) +
theme_bw() +
coord_cartesian(ylim = c(1, 105)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 5))
p5_1
p5_1 <- p5_1 +
theme(text = element_text(size = 18), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_x_discrete(labels = t_names) +
ggtitle("Perceived Human Liability") +
scale_fill_manual(values = c("#cccccc", "#333333"), name = "Transparency:",
labels = transparency_conds, guide = guide_legend(reverse = FALSE)) +
xlab("") +
ylab("") +
theme_classic() +
theme(axis.text.x = element_text(size = 16)) +
theme(axis.text.y = element_text(size = 16)) +
theme(plot.title = element_text(size = 18, hjust = 0.5)) +
theme(legend.text = element_text(size = 16), legend.title = element_text(size = 18)) +
geom_violin(width = 0.9, alpha = 0.38, size = 0.75) +
geom_sina(alpha = 0.6, size = 0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size = 0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom = "errorbar", width = 0.2)
p5_1
## ================================================================================================================
dev.new(width=13,height=12,noRStudioGD = TRUE)
png(filename = "culpability_figure5.png", width = 2000,height = 1500, res = 120)
figure1 <- ggarrange(p1, p2, p3, p4, p5, nrow=2,ncol=3,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure1,left = text_grob("Mean", color="black", face ="plain",size=18, rot=90),
bottom = text_grob("Condition", color="black", face ="plain",size=18))
dev.off()
dev.new(width=13,height=12,noRStudioGD = TRUE)
png(filename = "culpability_figure6.png", width = 2000,height = 1500, res = 120)
figure1 <- ggarrange(p1_1, p2_1, p3_1, p4_1, p5_1, nrow=2,ncol=3,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure1,left = text_grob("Mean", color="black", face ="plain",size=18, rot=90),
bottom = text_grob("Condition", color="black", face ="plain",size=18))
dev.off()
### T-test for software responsibility by label by transparency
t3 <- t.test(d_merged$firm_responsibility[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$firm_responsibility[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t3
## ================================================================================================================
##                                 Harvard Business School, Ethical Intelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV RESPONSIBILITY STUDY | EXPERIMENT 5
## ================================================================================================================
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
library(ggpubr)
library(dplyr)
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects'
)
## ================================================================================================================
##                                                  PRE-PROCESSING
## ================================================================================================================
## read in data:
# set working directory to current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read.csv('avc_e5.csv')
## explore data frame:
head(d)
str(d)
dim(d) # dimensions of data frame by row [1] and column [2]
colnames(d) # all column names
summary(d)
## rename variables:
names(d)[names(d) == 'FL_12_DO'] <- 'cond'
names(d)[names(d) == 'resp_human1_10'] <- 'auto_nt_human_r'
names(d)[names(d) == 'resp_software1_10'] <- 'auto_nt_firm_r'
names(d)[names(d) == 'resp_human2_10'] <- 'co_nt_human_r'
names(d)[names(d) == 'resp_software2_10'] <- 'co_nt_firm_r'
names(d)[names(d) == 'liable_human1_1'] <- 'auto_nt_human_l'
names(d)[names(d) == 'liable_firm1_1'] <- 'auto_nt_firm_l'
names(d)[names(d) == 'liab_human2_1'] <- 'co_nt_human_l'
names(d)[names(d) == 'liab_firm2_1'] <- 'co_nt_firm_l'
names(d)[names(d) == 'resp_human3_10'] <- 'auto_ft_human_r'
names(d)[names(d) == 'resp_software3_10'] <- 'auto_ft_firm_r'
names(d)[names(d) == 'resp_human4_10'] <- 'co_ft_human_r'
names(d)[names(d) == 'resp_software4_10'] <- 'co_ft_firm_r'
names(d)[names(d) == 'liab_human3_1'] <- 'auto_ft_human_l'
names(d)[names(d) == 'liab_soft3_1'] <- 'auto_ft_firm_l'
names(d)[names(d) == 'liab_human4_1'] <- 'co_ft_human_l'
names(d)[names(d) == 'liab_software4_1'] <- 'co_ft_firm_l'
## change condition entries
d$cond[d$cond == "FL_35"] <- "auto_nt"
d$cond[d$cond == "FL_36"] <- "co_nt"
d$cond[d$cond == "FL_50"] <- "auto_ft"
d$cond[d$cond == "FL_54"] <- "co_ft"
## subjects randomized:
table(d$cond)
## ================================================================================================================
##                                                   EXCLUSIONS
## ================================================================================================================
## number of participants BEFORE exclusions:
dim(d)[1] # extracting number of rows only, not columns
## attention exclusions:
# remove responses from data frame that failed attention checks
d <- subset(d, (d$att_1 == 2 & d$att_2 == 2))
dim(d) # number of participants should decrease after attention exclusions
n_original <- dim(d)[1]
## comprehension exclusions:
# remove responses from data frame that failed comprehension checks
d <- subset(d, (d$comp_1 == 2 & d$comp_2 == 4))
dim(d) # number of participants should decrease after comprehension exclusions
d <- subset(d, (d$comp_3 == 2 | d$comp_4 == 1 | d$comp_5 == 2 | d$comp_6 == 1 | d$comp_7 == 1 | d$comp_8 == 1))
dim(d)
## incomplete responses
d <- subset(d, (d$Finished == 1))
dim(d)
## number of participants AFTER exclusions:
n_final <- dim(d)[1] # extracting number of rows only, not columns
n_final
percent_excluded <- (n_original - n_final)/n_original
percent_excluded
table(d$cond)
## ================================================================================================================
##                                                    SUBSETTING
## ================================================================================================================
colnames(d)
d <- d %>% relocate(co_1, .after = auto_1)
d <- d %>% relocate(auto_2, .after = co_1)
d <- d %>% relocate(co_2, .after = auto_2)
d <- d %>% relocate(co_nt_firm_r, .after = auto_nt_firm_r)
d <- d %>% relocate(auto_ft_firm_r, .after = co_nt_firm_r)
d <- d %>% relocate(co_ft_firm_r, .after = auto_ft_firm_r)
d <- d %>% relocate(co_nt_human_r, .after = auto_nt_human_r)
d <- d %>% relocate(auto_ft_human_r, .after = co_nt_human_r)
d <- d %>% relocate(co_ft_human_r, .after = auto_ft_human_r)
d <- d %>% relocate(co_nt_firm_l, .after = auto_nt_firm_l)
d <- d %>% relocate(auto_ft_firm_l, .after = co_nt_firm_l)
d <- d %>% relocate(co_ft_firm_l, .after = auto_ft_firm_l)
d <- d %>% relocate(co_nt_human_l, .after = auto_nt_human_l)
d <- d %>% relocate(auto_ft_human_l, .after = co_nt_human_l)
d <- d %>% relocate(co_ft_human_l, .after = auto_ft_human_l)
## new data frame to extract pre-processed data into:
d_subset <- array(dim=c(dim(d)[1], 6))
colnames(d_subset) <- c('cond','automation','firm_responsibility','human_responsibility','firm_liability','human_liability')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
## extract data of interest from middle part of raw data:
for(i in 1:dim(d)[1]) {
pref1 <- d[i,24:27][!is.na(d[i,24:27])] # for a given row, get only the non-NA values
d_subset[i,2] <- as.numeric(pref1[pref1!= ""]) # and only the non-empty values
resp1 <- d[i,28:31][!is.na(d[i,28:31])]
d_subset[i,3] <- as.numeric(resp1[resp1!= ""])
resp2 <- d[i,32:35][!is.na(d[i,32:35])]
d_subset[i,4] <- as.numeric(resp2[resp2!= ""])
liab1 <- d[i,36:39][!is.na(d[i,36:39])]
d_subset[i,5] <- as.numeric(liab1[liab1!= ""])
liab2 <- d[i,40:43][!is.na(d[i,40:43])]
d_subset[i,6] <- as.numeric(liab2[liab2!= ""])
d_subset[i,1] <- d[i,69][!is.na(d[i,69])]
}
## merge data of interest back with raw data:
# new data frame to work with
d_merged <- cbind(d_subset, d[,52:68])
d_merged$ss <- 1:dim(d_merged)[1]
colnames(d_merged)
## add columns for label and transparency condition entries
d_merged$label <- ""
d_merged$transparency <- ""
d_merged$label[d_merged$cond == 'auto_nt'] <- 'auto'
d_merged$label[d_merged$cond == 'auto_ft'] <- 'auto'
d_merged$label[d_merged$cond == 'co_nt'] <- 'co'
d_merged$label[d_merged$cond == 'co_ft'] <- 'co'
d_merged$transparency[d_merged$cond == 'auto_nt'] <- 'no'
d_merged$transparency[d_merged$cond == 'auto_ft'] <- 'yes'
d_merged$transparency[d_merged$cond == 'co_nt'] <- 'no'
d_merged$transparency[d_merged$cond == 'co_ft'] <- 'yes'
## ================================================================================================================
##                                            DATA ANALYSIS- MEASURES
## ================================================================================================================
# (1) Ethics/Morality Norms for Misinformation
cronbach.alpha(d_merged[,c("norm_1_1", "norm_1_2", "norm_1_3", "norm_1_4", "norm_1_5")], na.rm = TRUE)
d_merged$ethics <- rowMeans(d_merged[,c("norm_1_1", "norm_1_2", "norm_1_3", "norm_1_4", "norm_1_5")], na.rm = TRUE)
## ================================================================================================================
##                                            PARTICIPANT CHARACTERISTICS
## ================================================================================================================
## age
mean(d_merged$age, trim = 0, na.rm = TRUE) ## mean age
hist(d_merged$age, main = "Histogram of Age", xlab = "Age")
## gender
table(d_merged$gender)[1]/sum(table(d$gender)) ## percentage of males
table(d_merged$gender)[2]/sum(table(d$gender)) ## percentage of females
barplot(table(d_merged$gender), main = "BarPlot for Gender", names.arg = c("Male","Female","Undisclosed","Other"))
## av knowledge
mean(d_merged$ai_knowledge_1, trim = 0, na.rm = TRUE) ## mean av knowledge
hist(d$ai_knowledge, xlab = 'AI Knowledge', main = 'Histogram of AI Knowledge')
## license
table(d$license)[1]/sum(table(d$license)) ## percentage with driver's license
table(d$license)[2]/sum(table(d$license)) ## percentage without driver's license
barplot(table(d_merged$license), main = "BarPlot for License", names.arg = c("Yes","No"))
## ================================================================================================================
##                                              DATA EXPLORATION - DISTRIBUTIONS
## ================================================================================================================
d_merged$cond = as.factor(d_merged$cond) # turn into factor
## (1) Summary Stats
## AUTOMATION PERCEPTION
summary(d_merged$automation)
tapply(d_merged$automation, d_merged$cond, mean)
## Responsibility
## Software
summary(d_merged$firm_responsibility)
tapply(d_merged$firm_responsibility, d_merged$cond, mean)
## Human
summary(d_merged$human_responsibility)
tapply(d_merged$human_responsibility, d_merged$cond, mean)
## Liability
## Firm
summary(d_merged$firm_liability)
tapply(d_merged$firm_liability, d_merged$cond, mean)
## Human
summary(d_merged$human_liability)
tapply(d_merged$human_liability, d_merged$cond, mean)
## Summary table across all conditions
d_merged %>%
group_by(cond) %>%
summarise(across(automation:human_liability, mean, na.rm= TRUE))
## (2) T-TESTS
t.test(firm_liability ~ transparency, data = d_merged)
pairwise_t_test(d_merged, automation ~ cond)
pairwise_t_test(d_merged, firm_responsibility ~ cond)
pairwise_t_test(d_merged, human_responsibility ~ cond)
pairwise_t_test(d_merged, firm_liability ~ cond)
pairwise_t_test(d_merged, human_liability ~ cond)
### T-test for automation by label by transparency
t1 <- t.test(d_merged$automation[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$automation[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t1
t2 <- t.test(d_merged$automation[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$automation[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t2
### T-test for software responsibility by label by transparency
t3 <- t.test(d_merged$firm_responsibility[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$firm_responsibility[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t3
t4 <- t.test(d_merged$firm_responsibility[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$firm_responsibility[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t4
### T-test for human responsibility by label by transparency
t5 <- t.test(d_merged$human_responsibility[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$human_responsibility[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t5
t6 <- t.test(d_merged$human_responsibility[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$human_responsibility[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t6
### T-test for firm liability by label by transparency
t7 <- t.test(d_merged$firm_liability[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$firm_liability[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t7
t8 <- t.test(d_merged$firm_liability[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$firm_liability[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t8
var.test(d_merged$firm_liability[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$firm_liability[d_merged$transparency == 'no'& d_merged$label == 'co'])
colnames(d_merged)
table(d_merged$transparency)
## ================================================================================================================
##                                 Harvard Business School, Ethical Intelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV RESPONSIBILITY STUDY | EXPERIMENT 5
## ================================================================================================================
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
library(ggpubr)
library(dplyr)
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects'
)
## ================================================================================================================
##                                                  PRE-PROCESSING
## ================================================================================================================
## read in data:
# set working directory to current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read.csv('avc_e5.csv')
## explore data frame:
head(d)
str(d)
dim(d) # dimensions of data frame by row [1] and column [2]
colnames(d) # all column names
summary(d)
## rename variables:
names(d)[names(d) == 'FL_12_DO'] <- 'cond'
names(d)[names(d) == 'resp_human1_10'] <- 'auto_nt_human_r'
names(d)[names(d) == 'resp_software1_10'] <- 'auto_nt_firm_r'
names(d)[names(d) == 'resp_human2_10'] <- 'co_nt_human_r'
names(d)[names(d) == 'resp_software2_10'] <- 'co_nt_firm_r'
names(d)[names(d) == 'liable_human1_1'] <- 'auto_nt_human_l'
names(d)[names(d) == 'liable_firm1_1'] <- 'auto_nt_firm_l'
names(d)[names(d) == 'liab_human2_1'] <- 'co_nt_human_l'
names(d)[names(d) == 'liab_firm2_1'] <- 'co_nt_firm_l'
names(d)[names(d) == 'resp_human3_10'] <- 'auto_ft_human_r'
names(d)[names(d) == 'resp_software3_10'] <- 'auto_ft_firm_r'
names(d)[names(d) == 'resp_human4_10'] <- 'co_ft_human_r'
names(d)[names(d) == 'resp_software4_10'] <- 'co_ft_firm_r'
names(d)[names(d) == 'liab_human3_1'] <- 'auto_ft_human_l'
names(d)[names(d) == 'liab_soft3_1'] <- 'auto_ft_firm_l'
names(d)[names(d) == 'liab_human4_1'] <- 'co_ft_human_l'
names(d)[names(d) == 'liab_software4_1'] <- 'co_ft_firm_l'
## change condition entries
d$cond[d$cond == "FL_35"] <- "auto_nt"
d$cond[d$cond == "FL_36"] <- "co_nt"
d$cond[d$cond == "FL_50"] <- "auto_ft"
d$cond[d$cond == "FL_54"] <- "co_ft"
## subjects randomized:
table(d$cond)
## ================================================================================================================
##                                                   EXCLUSIONS
## ================================================================================================================
## number of participants BEFORE exclusions:
dim(d)[1] # extracting number of rows only, not columns
## attention exclusions:
# remove responses from data frame that failed attention checks
d <- subset(d, (d$att_1 == 2 & d$att_2 == 2))
dim(d) # number of participants should decrease after attention exclusions
n_original <- dim(d)[1]
## comprehension exclusions:
# remove responses from data frame that failed comprehension checks
d <- subset(d, (d$comp_1 == 2 & d$comp_2 == 4))
dim(d) # number of participants should decrease after comprehension exclusions
d <- subset(d, (d$comp_3 == 2 | d$comp_4 == 1 | d$comp_5 == 2 | d$comp_6 == 1 | d$comp_7 == 1 | d$comp_8 == 1))
dim(d)
## incomplete responses
d <- subset(d, (d$Finished == 1))
dim(d)
## number of participants AFTER exclusions:
n_final <- dim(d)[1] # extracting number of rows only, not columns
n_final
percent_excluded <- (n_original - n_final)/n_original
percent_excluded
table(d$cond)
