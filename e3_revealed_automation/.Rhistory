filter(
comp_1 == 2,
comp_2 == 4
) -> df
n_excluded <- n_original - length(df$StartDate)
prop_excluded <- n_excluded / n_original
percentage_clicked <- mean(as.numeric(df$clicked))
percentage_clicked
View(df)
df$words_1
word_cloud <- file("wordCloud.txt", "wb")
writeBin( paste(df$words_1, collapse="\n"), word_cloud )
close(word_cloud)
View(df)
# Read full dataset
df <- read_csv("AV_Culpability_E7.csv")
View(df)
setwd("/Users/jho/Dropbox (Harvard University)/av_mislabeling_liability/e4_opacity")
library(sjstats)
library(tidyverse)
library(ggpubr)
library(ggsignif)
library(grid)
library(ltm)
source('../e2_liability/process.R')
# Read full dataset
df <- read_csv("avc_e6_full.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Rename column and labels
df$cond <- df$FL_12_DO
df$cond[df$cond == "FL_35"] <- "auto_op"
df$cond[df$cond == "FL_36"] <- "co_op"
df$cond[df$cond == "FL_50"] <- "auto_ft"
df$cond[df$cond == "FL_54"] <- "co_ft"
#==============================================================
# EXCLUSIONS
#==============================================================
df |>
filter(
att_1 == 2,
att_2 == 2 ) -> df
recruited_participants <- dim(df)[1]
df |>
filter(
comp_1 == 2,
comp_2 == 4,
comp_3 == 1
) -> df
# Exclude more (based on Stuti's code)
df |>
filter((cond == 'auto_op' & comp_4 == 2 |
cond == 'auto_ft' & comp_4 == 3 |
cond == 'co_op' & comp_4 == 2   |
cond == 'co_ft' & comp_4 == 3     )) -> df
final_n <- dim(df)[1]
excluded <- recruited_participants - final_n
# Identify transparency and labels
df |>
mutate(
transparency = ifelse(grepl("op", cond), "no", "yes"),
label = ifelse(grepl("auto", cond), "auto", "co"),
) -> df
std_colnames <- c("id", "cond", "transparency", "label", "resp_soft", "resp_human",
"liable_firm", "liable_human", "capability","age", "gender", "ai_knowledge", "license")
auto_op <- df |>
filter(cond == "auto_op") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}1_[0-9]{1,}"), auto_1, age, gender, ai_knowledge_1, license)
colnames(auto_op) <- std_colnames
auto_ft <- df |>
filter(cond == "auto_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}3_[0-9]{1,}"), auto_2, age, gender, ai_knowledge_1, license)
colnames(auto_ft) <- std_colnames
co_op <- df |>
filter(cond == "co_op") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}2_[0-9]{1,}"), co_1, age, gender, ai_knowledge_1, license)
colnames(co_op) <- std_colnames
co_ft <- df |>
filter(cond == "co_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}4_[0-9]{1,}"), co_2, age, gender, ai_knowledge_1, license)
colnames(co_ft) <- std_colnames
d <- rbind(auto_ft, co_ft, co_op, auto_op)
rm(auto_ft, co_ft, co_op, auto_op)
d |>
mutate_at(
c("resp_soft", "resp_human", "liable_firm", "liable_human", "capability",
"age", "gender", "license", "ai_knowledge"),
as.numeric
) -> d
cronbach.alpha(d[,c("resp_human", "liable_human")])
cronbach.alpha(d[,c("resp_soft", "liable_firm")])
d |>
mutate(
human = (resp_human + liable_human)/2,
firm = (resp_soft + liable_firm)/2
) -> d
#=================================================================================
# PARTICIPANT CHARACTERISTICS
#=================================================================================
# AGE
mean(d[d$age < 150,]$age) # filtering the ones who put year
hist(d[d$age < 150,]$age, main = "Histogram of Age", xlab = "Age")
# GENDER
d |>
filter( gender < 3 ) |>
mutate(
gender_lab = ifelse(gender == 1, "male", "female"),
is_male = ifelse(gender == 1, 1, 0)
) -> gender
mean(gender$is_male)
barplot(table(gender$gender_lab), main="Participants' Gender")
rm(gender)
## AV KNOWLEDGE
mean(d$ai_knowledge)
hist(d$ai_knowledge, xlab = 'AI Knowledge', main = 'Histogram of AI Knowledge')
## CAPABILITY
### ANOVA
cap_anova <- aov(capability ~ as.factor(label) * as.factor(transparency), data = d)
# FIRM COMBINED
process(data = d_process, y = "firm", x = "label",
m =c("capability"), w="transparency", model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
#=================================================================================
# MEDIATION of Perceived Capability on DV
#=================================================================================
d |>
mutate_at( c("transparency", "label"), as.factor) |>
mutate_at( c("transparency", "label"), as.numeric) -> d_process
# FIRM COMBINED
process(data = d_process, y = "firm", x = "label",
m =c("capability"), w="transparency", model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# HUMAN COMBINED
process(data = d_process, y = "human", x = "label",
m =c("capability"), w="transparency", model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
setwd("/Users/jho/Dropbox (Harvard University)/av_mislabeling_liability/e3_revealed_automation")
## install packages
library(ggpubr)
library(dplyr)
library(sjstats)
library(ggpubr)
library(grid)
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects'
)
## read in data:
# set working directory to current directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read.csv('avc_e5.csv')
## explore data frame:
head(d)
str(d)
dim(d) # dimensions of data frame by row [1] and column [2]
colnames(d) # all column names
summary(d)
## rename variables:
names(d)[names(d) == 'FL_12_DO'] <- 'cond'
names(d)[names(d) == 'resp_human1_10'] <- 'auto_nt_human_r'
names(d)[names(d) == 'resp_software1_10'] <- 'auto_nt_firm_r'
names(d)[names(d) == 'resp_human2_10'] <- 'co_nt_human_r'
names(d)[names(d) == 'resp_software2_10'] <- 'co_nt_firm_r'
names(d)[names(d) == 'liable_human1_1'] <- 'auto_nt_human_l'
names(d)[names(d) == 'liable_firm1_1'] <- 'auto_nt_firm_l'
names(d)[names(d) == 'liab_human2_1'] <- 'co_nt_human_l'
names(d)[names(d) == 'liab_firm2_1'] <- 'co_nt_firm_l'
names(d)[names(d) == 'resp_human3_10'] <- 'auto_ft_human_r'
names(d)[names(d) == 'resp_software3_10'] <- 'auto_ft_firm_r'
names(d)[names(d) == 'resp_human4_10'] <- 'co_ft_human_r'
names(d)[names(d) == 'resp_software4_10'] <- 'co_ft_firm_r'
names(d)[names(d) == 'liab_human3_1'] <- 'auto_ft_human_l'
names(d)[names(d) == 'liab_soft3_1'] <- 'auto_ft_firm_l'
names(d)[names(d) == 'liab_human4_1'] <- 'co_ft_human_l'
names(d)[names(d) == 'liab_software4_1'] <- 'co_ft_firm_l'
## change condition entries
d$cond[d$cond == "FL_35"] <- "auto_nt"
d$cond[d$cond == "FL_36"] <- "co_nt"
d$cond[d$cond == "FL_50"] <- "auto_ft"
d$cond[d$cond == "FL_54"] <- "co_ft"
## subjects randomized:
table(d$cond)
## number of participants BEFORE exclusions:
dim(d)[1] # extracting number of rows only, not columns
## attention exclusions:
# remove responses from data frame that failed attention checks
d <- subset(d, (d$att_1 == 2 & d$att_2 == 2))
dim(d) # number of participants should decrease after attention exclusions
n_original <- dim(d)[1]
## comprehension exclusions:
# remove responses from data frame that failed comprehension checks
d <- subset(d, (d$comp_1 == 2 & d$comp_2 == 4))
dim(d) # number of participants should decrease after comprehension exclusions
d <- subset(d, (d$comp_3 == 2 | d$comp_4 == 1 | d$comp_5 == 2 | d$comp_6 == 1 | d$comp_7 == 1 | d$comp_8 == 1))
dim(d)
## incomplete responses
d <- subset(d, (d$Finished == 1))
dim(d)
## number of participants AFTER exclusions:
n_final <- dim(d)[1] # extracting number of rows only, not columns
n_final
percent_excluded <- (n_original - n_final)/n_original
percent_excluded
table(d$cond)
colnames(d)
d <- d %>% relocate(co_1, .after = auto_1)
d <- d %>% relocate(auto_2, .after = co_1)
d <- d %>% relocate(co_2, .after = auto_2)
d <- d %>% relocate(co_nt_firm_r, .after = auto_nt_firm_r)
d <- d %>% relocate(auto_ft_firm_r, .after = co_nt_firm_r)
d <- d %>% relocate(co_ft_firm_r, .after = auto_ft_firm_r)
d <- d %>% relocate(co_nt_human_r, .after = auto_nt_human_r)
d <- d %>% relocate(auto_ft_human_r, .after = co_nt_human_r)
d <- d %>% relocate(co_ft_human_r, .after = auto_ft_human_r)
d <- d %>% relocate(co_nt_firm_l, .after = auto_nt_firm_l)
d <- d %>% relocate(auto_ft_firm_l, .after = co_nt_firm_l)
d <- d %>% relocate(co_ft_firm_l, .after = auto_ft_firm_l)
d <- d %>% relocate(co_nt_human_l, .after = auto_nt_human_l)
d <- d %>% relocate(auto_ft_human_l, .after = co_nt_human_l)
d <- d %>% relocate(co_ft_human_l, .after = auto_ft_human_l)
## new data frame to extract pre-processed data into:
d_subset <- array(dim=c(dim(d)[1], 6))
colnames(d_subset) <- c('cond','automation','firm_responsibility','human_responsibility','firm_liability','human_liability')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
## extract data of interest from middle part of raw data:
for(i in 1:dim(d)[1]) {
pref1 <- d[i,24:27][!is.na(d[i,24:27])] # for a given row, get only the non-NA values
d_subset[i,2] <- as.numeric(pref1[pref1!= ""]) # and only the non-empty values
resp1 <- d[i,28:31][!is.na(d[i,28:31])]
d_subset[i,3] <- as.numeric(resp1[resp1!= ""])
resp2 <- d[i,32:35][!is.na(d[i,32:35])]
d_subset[i,4] <- as.numeric(resp2[resp2!= ""])
liab1 <- d[i,36:39][!is.na(d[i,36:39])]
d_subset[i,5] <- as.numeric(liab1[liab1!= ""])
liab2 <- d[i,40:43][!is.na(d[i,40:43])]
d_subset[i,6] <- as.numeric(liab2[liab2!= ""])
d_subset[i,1] <- d[i,69][!is.na(d[i,69])]
}
## merge data of interest back with raw data:
# new data frame to work with
d_merged <- cbind(d_subset, d[,52:68])
d_merged$ss <- 1:dim(d_merged)[1]
colnames(d_merged)
## add columns for label and transparency condition entries
d_merged$label <- ""
d_merged$transparency <- ""
d_merged$label[d_merged$cond == 'auto_nt'] <- 'auto'
d_merged$label[d_merged$cond == 'auto_ft'] <- 'auto'
d_merged$label[d_merged$cond == 'co_nt'] <- 'co'
d_merged$label[d_merged$cond == 'co_ft'] <- 'co'
d_merged$transparency[d_merged$cond == 'auto_nt'] <- 'no'
d_merged$transparency[d_merged$cond == 'auto_ft'] <- 'yes'
d_merged$transparency[d_merged$cond == 'co_nt'] <- 'no'
d_merged$transparency[d_merged$cond == 'co_ft'] <- 'yes'
cronbach.alpha(d_merged[,c("norm_1_1", "norm_1_2", "norm_1_3", "norm_1_4", "norm_1_5")], na.rm = TRUE)
d_merged$ethics <- rowMeans(d_merged[,c("norm_1_1", "norm_1_2", "norm_1_3", "norm_1_4", "norm_1_5")], na.rm = TRUE)
## age
mean(d_merged$age, trim = 0, na.rm = TRUE) ## mean age
hist(d_merged$age, main = "Histogram of Age", xlab = "Age")
## gender
table(d_merged$gender)[1]/sum(table(d$gender)) ## percentage of males
table(d_merged$gender)[2]/sum(table(d$gender)) ## percentage of females
barplot(table(d_merged$gender), main = "BarPlot for Gender", names.arg = c("Male","Female","Undisclosed","Other"))
## av knowledge
mean(d_merged$ai_knowledge_1, trim = 0, na.rm = TRUE) ## mean av knowledge
hist(d$ai_knowledge, xlab = 'AI Knowledge', main = 'Histogram of AI Knowledge')
## license
table(d$license)[1]/sum(table(d$license)) ## percentage with driver's license
table(d$license)[2]/sum(table(d$license)) ## percentage without driver's license
barplot(table(d_merged$license), main = "BarPlot for License", names.arg = c("Yes","No"))
d_merged$cond = as.factor(d_merged$cond) # turn into factor
## AUTOMATION PERCEPTION
summary(d_merged$automation)
tapply(d_merged$automation, d_merged$cond, mean)
## Responsibility
## Software
summary(d_merged$firm_responsibility)
tapply(d_merged$firm_responsibility, d_merged$cond, mean)
## Human
summary(d_merged$human_responsibility)
tapply(d_merged$human_responsibility, d_merged$cond, mean)
## Liability
## Firm
summary(d_merged$firm_liability)
tapply(d_merged$firm_liability, d_merged$cond, mean)
## Human
summary(d_merged$human_liability)
tapply(d_merged$human_liability, d_merged$cond, mean)
## Summary table across all conditions
d_merged %>%
group_by(cond) %>%
summarise(across(automation:human_liability, mean, na.rm= TRUE))
cronbach.alpha(d_subset[, c("firm_responsibility","firm_liability")])
cronbach.alpha(d_subset[, c("human_responsibility","human_liability")])
d_merged |>
mutate(
firm = (`firm_responsibility` + `firm_liability`) / 2,
human = (`human_responsibility` + `human_liability`) / 2
) -> d_merged
## (2) T-TESTS
t.test(firm_liability ~ transparency, data = d_merged)
pairwise_t_test(d_merged, automation ~ cond)
pairwise_t_test(d_merged, firm_responsibility ~ cond)
pairwise_t_test(d_merged, human_responsibility ~ cond)
pairwise_t_test(d_merged, firm_liability ~ cond)
pairwise_t_test(d_merged, human_liability ~ cond)
pairwise_t_test(d_merged, firm ~ cond)
pairwise_t_test(d_merged, human ~ cond)
### T-test for automation by label by transparency
t1 <- t.test(d_merged$automation[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$automation[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t1
t2 <- t.test(d_merged$automation[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$automation[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t2
### T-test for software responsibility by label by transparency
t3 <- t.test(d_merged$firm_responsibility[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$firm_responsibility[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t3
t4 <- t.test(d_merged$firm_responsibility[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$firm_responsibility[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t4
### T-test for human responsibility by label by transparency
t5 <- t.test(d_merged$human_responsibility[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$human_responsibility[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t5
t6 <- t.test(d_merged$human_responsibility[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$human_responsibility[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t6
### T-test for firm liability by label by transparency
t7 <- t.test(d_merged$firm_liability[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$firm_liability[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t7
var.test(d_merged$firm_liability[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$firm_liability[d_merged$transparency == 'no'& d_merged$label == 'co'])
t8 <- t.test(d_merged$firm_liability[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$firm_liability[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t8
### T-test for human liability by label by transparency
t9 <- t.test(d_merged$human_liability[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$human_liability[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t9
t10 <- t.test(d_merged$human_liability[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$human_liability[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t10
### T-test for human combined
t11 <- t.test(d_merged$human[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$human[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t11
t12 <- t.test(d_merged$human[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$human[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t12
### T-test for firm combined
t13 <- t.test(d_merged$firm[d_merged$transparency == 'yes'& d_merged$label == 'auto'],
d_merged$firm[d_merged$transparency == 'yes'& d_merged$label == 'co'], paired = FALSE)
t13
t14 <- t.test(d_merged$firm[d_merged$transparency == 'no'& d_merged$label == 'auto'],
d_merged$firm[d_merged$transparency == 'no'& d_merged$label == 'co'], paired = FALSE)
t14
## software responsibility
firmresp_mod <- aov(firm_responsibility ~ as.factor(label) * as.factor(transparency), data = d_merged)
summary(firmresp_mod)
anova_stats(firmresp_mod)
## human responsibility
humanresp_mod <- aov(human_responsibility ~ as.factor(label) * as.factor(transparency), data = d_merged)
summary(humanresp_mod)
anova_stats(humanresp_mod)
## firm liability
firmliab_mod <- aov(firm_liability ~ as.factor(label) * as.factor(transparency), data = d_merged)
summary(firmliab_mod)
anova_stats(firmliab_mod)
## human liability
humaliab_mod <- aov(human_liability ~ as.factor(label) * as.factor(transparency), data = d_merged)
summary(humaliab_mod)
anova_stats(humaliab_mod)
## ================================================================================================================
##                                              PLOTTING MAIN FIGURES
## ================================================================================================================
a_names <- c('Auto_FT, Auto_NT,Co_FT,Co_NT')
t_names <- c("Autopilot", "Copilot")
transparency_conds <- c('Absent', 'Present')
p1 <- ggplot(d_merged,aes(x=cond,y=automation)) +
theme_bw() + coord_cartesian(ylim=c(1,7.5)) + scale_y_continuous(breaks = scales::pretty_breaks(n = 3)) +
geom_signif(comparisons = list(c("auto_ft", "co_ft"), c("auto_nt", "co_nt"), c("auto_ft", "co_nt"), c("auto_ft", "auto_nt"),c("auto_nt", "co_ft"), c("co_ft", "co_nt")),
test = "wilcox.test", test.args = list(exact = FALSE, alternative = "two.sided"),
map_signif_level=TRUE,y_position = c(7.25,7,6.75,6.5,6.25,6), textsize = 3.5)
p1 <- p1 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=a_names) +
ggtitle("Perceived Level of Automation") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
linewidth=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1
##-----------------------------------------------------------------------------------------------------------------
p1_1 <- ggplot(d_merged, aes(x = factor(label), y = automation, fill = factor(transparency)), color = factor(transparency_conds)) +
theme_bw() +
coord_cartesian(ylim = c(1, 7.5)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 5))
p1_1
p1_1 <- p1_1 +
theme(text = element_text(size = 18), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_x_discrete(labels = t_names) +
ggtitle("Perceived Level of Automation") +
scale_fill_manual(values = c("#cccccc", "#333333"), name = "Transparency:",
labels = transparency_conds, guide = guide_legend(reverse = FALSE)) +
xlab("") +
ylab("") +
theme_classic() +
theme(axis.text.x = element_text(size = 16)) +
theme(axis.text.y = element_text(size = 16)) +
theme(plot.title = element_text(size = 18, hjust = 0.5)) +
theme(legend.text = element_text(size = 16), legend.title = element_text(size = 18)) +
geom_violin(width = 0.9, alpha = 0.38, size = 0.75) +
geom_sina(alpha = 0.6, size = 0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size = 0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom = "errorbar", width = 0.2)
p1_1
p2 <- ggplot(d_merged,aes(x=factor(cond),y=firm_responsibility)) +
theme_bw() +coord_cartesian(ylim=c(1,130))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto_ft", "co_ft"), c("auto_nt", "co_nt"), c("auto_ft", "co_nt"), c("auto_ft", "auto_nt"),c("auto_nt", "co_ft"), c("co_ft", "co_nt")),
test = "wilcox.test", test.args = list(exact = FALSE, alternative = "two.sided"),
map_signif_level=TRUE,y_position = c(125,120,115,110,105, 100), textsize = 3.5)
p2 <- p2 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=a_names)+
ggtitle("Perceived Software Responsibility") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
linewidth=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p2
process(data = d_merged, y = "human", x = "cond",
m =c("automation"), model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
d_merged$cond = as.factor(d_merged$cond)
d_merged$cond = as.numeric(d_merged$cond)
process(data = d_merged, y = "human", x = "cond",
m =c("automation"), model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## ================================================================================================================
##                                              DATA ANALYSIS - MEDIATION
## ================================================================================================================
source('process.R')
d_merged$cond = as.factor(d_merged$cond)
d_merged$cond = as.numeric(d_merged$cond)
process(data = d_merged, y = "human", x = "cond",
m =c("automation"), model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
View(d_merged)
d_merged$transparency = as.numeric(as.factor(d_merged$transparency))
View(d_merged)
d_merged$label = as.numeric(as.factor(d_merged$label))
process(data = d_merged, y = "human", x = "label",
m =c("automation"), w = "transparency",model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
process(data = d_merged, y = "firm", x = "label",
m =c("automation"), w = "transparency", model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
process(data = d_merged, y = "human", x = "label",
m =c("automation"), w = "transparency",model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
View(d_merged)
d_merged$transparency <- ifelse(d_merged$transparency == 1, 2, 1)
process(data = d_merged, y = "human", x = "label",
m =c("automation"), w = "transparency",model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
process(data = d_merged, y = "firm", x = "label",
m =c("automation"), w = "transparency", model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
