# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
df |>
mutate_if(all.is.numeric, as.numeric) -> df
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
rm(list = ls())
library(sjstats)
library(tidyverse)
library(ggpubr)
library(ggsignif)
library(grid)
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects'
)
# Read full dataset
df <- read_csv("avc_e6_full.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Rename column and labels
df$cond <- df$FL_12_DO
df$cond[df$cond == "FL_35"] <- "auto_op"
df$cond[df$cond == "FL_36"] <- "co_op"
df$cond[df$cond == "FL_50"] <- "auto_ft"
df$cond[df$cond == "FL_54"] <- "co_ft"
#==============================================================
# EXCLUSIONS
#==============================================================
df |>
filter(
att_1 == 2,
att_2 == 2 ) -> df
recruited_participants <- dim(df)[1]
df |>
filter(
comp_1 == 2,
comp_2 == 4,
comp_3 == 1
) -> df
# Exclude more (based on Stuti's code)
df |>
filter((cond == 'auto_op' & comp_4 == 2 |
cond == 'auto_ft' & comp_4 == 3 |
cond == 'co_op' & comp_4 == 2   |
cond == 'co_ft' & comp_4 == 3     )) -> df
final_n <- dim(df)[1]
excluded <- recruited_participants - final_n
# Identify transparency and labels
df |>
mutate(
transparency = ifelse(grepl("op", cond), "no", "yes"),
label = ifelse(grepl("auto", cond), "auto", "co"),
) -> df
std_colnames <- c("id", "cond", "transparency", "label", "resp_soft", "resp_human",
"liable_firm", "liable_human", "capability","age", "gender", "ai_knowledge", "license")
auto_op <- df |>
filter(cond == "auto_op") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}1_[0-9]{1,}"), auto_1, age, gender, ai_knowledge_1, license)
colnames(auto_op) <- std_colnames
auto_ft <- df |>
filter(cond == "auto_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}3_[0-9]{1,}"), auto_2, age, gender, ai_knowledge_1, license)
colnames(auto_ft) <- std_colnames
co_op <- df |>
filter(cond == "co_op") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}2_[0-9]{1,}"), co_1, age, gender, ai_knowledge_1, license)
colnames(co_op) <- std_colnames
co_ft <- df |>
filter(cond == "co_ft") |>
dplyr::select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}4_[0-9]{1,}"), co_2, age, gender, ai_knowledge_1, license)
colnames(co_ft) <- std_colnames
d <- rbind(auto_ft, co_ft, co_op, auto_op)
rm(auto_ft, co_ft, co_op, auto_op)
d |>
mutate_at(
c("resp_soft", "resp_human", "liable_firm", "liable_human", "capability",
"age", "gender", "license", "ai_knowledge"),
as.numeric
) -> d
cronbach.alpha(d[,c("resp_human", "liable_human")])
cronbach.alpha(d[,c("resp_soft", "liable_firm")])
d |>
mutate(
human = (resp_human + liable_human)/2,
firm = (resp_soft + liable_firm)/2
) -> d
t.test(d[d$transparency == "no" & d$label == "auto",]$firm,
d[d$transparency == "no" & d$label == "co",]$firm)
#=================================================================================
# PARTICIPANT CHARACTERISTICS
#=================================================================================
# AGE
mean(d[d$age < 150,]$age) # filtering the ones who put year
hist(d[d$age < 150,]$age, main = "Histogram of Age", xlab = "Age")
# GENDER
d |>
filter( gender < 3 ) |>
mutate(
gender_lab = ifelse(gender == 1, "male", "female"),
is_male = ifelse(gender == 1, 1, 0)
) -> gender
mean(gender$is_male)
barplot(table(gender$gender_lab), main="Participants' Gender")
rm(gender)
## CAPABILITY
### ANOVA
cap_anova <- aov(capability ~ as.factor(label) * as.factor(transparency), data = d)
summary(cap_anova)
anova_stats(cap_anova)
rm(cap_anova)
## SOFTWARE RESPONSIBILITY
### ANOVA
rs_anova <- aov(resp_soft ~ as.factor(label) * as.factor(transparency), data = d)
summary(rs_anova)
anova_stats(rs_anova)
rm(rs_anova)
## HUMAN RESPONSIBILITY
### ANOVA
rh_anova <- aov(resp_human ~ as.factor(label) * as.factor(transparency), data = d)
summary(rh_anova)
anova_stats(rh_anova)
### t-tests
rh_t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$resp_human,
d[d$transparency == 'yes'& d$label == 'co',]$resp_human, paired = FALSE)
rh_t1
rh_t2 <- t.test(d[d$transparency == 'no' & d$label == 'auto',]$resp_human,
d[d$transparency == 'no' & d$label == 'co',]$resp_human, paired = FALSE)
rh_t2
rm(rh_anova, rh_t1, rh_t2)
## FIRM LIABILITY
### ANOVA
fl_anova <- aov(liable_firm ~ as.factor(label) * as.factor(transparency), data = d)
summary(fl_anova)
anova_stats(fl_anova)
### t-tests
fl_t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$liable_firm,
d[d$transparency == 'yes'& d$label == 'co',]$liable_firm, paired = FALSE)
fl_t1
fl_t2 <- t.test(d[d$transparency == 'no' & d$label == 'auto',]$liable_firm,
d[d$transparency == 'no' & d$label == 'co',]$liable_firm, paired = FALSE)
fl_t2
rm(fl_anova, fl_t1, fl_t2)
## HUMAN LIABILITY
### ANOVA
hl_anova <- aov(liable_human ~ as.factor(label) * as.factor(transparency), data = d)
summary(hl_anova)
anova_stats(hl_anova)
### t-tests
hl_t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$liable_human,
d[d$transparency == 'yes'& d$label == 'co',]$liable_human, paired = FALSE)
hl_t1
hl_t2 <- t.test(d[d$transparency == 'no' & d$label == 'auto',]$liable_human,
d[d$transparency == 'no' & d$label == 'co',]$liable_human, paired = FALSE)
hl_t2
rm(hl_anova, hl_t1, hl_t2)
## HUMAN COMBINED
### ANOVA
h_anova <- aov(human ~ as.factor(label) * as.factor(transparency), data = d)
summary(h_anova)
anova_stats(h_anova)
### t-tests
h_t1 <- t.test(d[d$transparency == 'yes'& d$label == 'auto',]$human,
d[d$transparency == 'yes'& d$label == 'co',]$human, paired = FALSE)
h_t1
cohen.d(d[d$transparency == 'yes'& d$label == 'auto',]$human,
d[d$transparency == 'yes'& d$label == 'co',]$human)
#=================================================================================
# PLOTS LABEL-TRANSPARENCY
#=================================================================================
std.error <- function(x) sd(x)/sqrt(length(x))
d |>
gather(key = "DV", value = "Value",
firm, human) |>
mutate(
DV = ifelse( DV == "firm", "Firm Liability", "Human Liability"),
`Marketing Label` = case_when(
label == "auto" ~ "Autopilot",
label == "co" ~ "Copilot"
),
Transparency = case_when(
transparency == "no" ~ "Not Transparent",
transparency == "yes" ~ "Transparent"
)
) |>
group_by(`Marketing Label`, Transparency, DV) |>
summarize(
mean = mean(Value),
se = std.error(Value)
) -> d_plot
d |>
gather(key = "DV", value = "Value",
firm, human) |>
mutate(
DV = ifelse( DV == "firm", "Firm Liability", "Human Liability"),
`Marketing Label` = case_when(
label == "auto" ~ "Autopilot",
label == "co" ~ "Copilot"
),
Transparency = case_when(
transparency == "no" ~ "Not Transparent",
transparency == "yes" ~ "Transparent"
)
) |>
group_by(`Marketing Label`, Transparency, DV) |>
summarize(
mean = mean(Value),
se = std.error(Value)
) -> d_plot
d |>
gather(key = "DV", value = "Value",
firm, human) |>
mutate(
DV = ifelse( DV == "firm", "Firm Liability", "Human Liability"),
`Marketing Label` = case_when(
label == "auto" ~ "Autopilot",
label == "co" ~ "Copilot"
),
Transparency = case_when(
transparency == "no" ~ "Not Transparent",
transparency == "yes" ~ "Transparent"
)
) |>
group_by(`Marketing Label`, Transparency, DV) |>
summarise(
mean = mean(Value),
se = std.error(Value)
) -> d_plot
plot_did <- function(df=d_plot, dv, signif=c("*","*","*"), yaxis=TRUE, ypos=c(100, 100, 114)) {
d_plot <- df |>
filter(DV == dv)
se_width <- 1.96
ggplot(data = d_plot, aes(x=Transparency, y=mean, fill=`Marketing Label`)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold")
) +
geom_signif(
y_position = ypos, xmin = c(0.8, 1.8, 1.0), xmax = c(1.2, 2.2, 2.0),
annotation = signif, tip_length = 0.1, color='black', size = .25, textsize = 3.5
) +
scale_fill_grey() +
scale_color_grey() +
ggtitle(dv) +
xlab("Transparency") +
ylab("Response") +
scale_y_continuous(limits = c(0,118), breaks = c(0,20,40,60,80,100)) -> p
if(!yaxis) {
p <- p +
theme( axis.line.y = element_line(color = "white"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
}
return(p)
}
plot_did <- function(df=d_plot, dv, signif=c("*","*","*"), yaxis=TRUE, ypos=c(100, 100, 114)) {
d_plot <- df |>
filter(DV == dv)
se_width <- 1.96
ggplot(data = d_plot, aes(x=Transparency, y=mean, fill=`Marketing Label`)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=10)
) +
geom_signif(
y_position = ypos, xmin = c(0.8, 1.8, 1.0), xmax = c(1.2, 2.2, 2.0),
annotation = signif, tip_length = 0.1, color='black', size = .25, textsize = 3.5
) +
scale_fill_grey() +
scale_color_grey() +
ggtitle(dv) +
xlab("Transparency") +
ylab("Response") +
scale_y_continuous(limits = c(0,118), breaks = c(0,20,40,60,80,100)) -> p
if(!yaxis) {
p <- p +
theme( axis.line.y = element_line(color = "white"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
}
return(p)
}
plot_did(dv = "Human Liability", signif = c("*", "ns", "*"), yaxis=F) -> p1
plot_did(dv = "Firm Liability", signif = c("*", "ns", "+"), ypos = c(80,80,94))  -> p2
p2
ggarrange(p2 + rremove("ylab") + rremove("xlab"),
p1 + rremove("ylab") + rremove("xlab"),
ncol = 2, common.legend = TRUE) |>
annotate_figure( left = textGrob("Mean Ratings", rot = 90, vjust = 1, gp = gpar(cex = .8, fontface = "bold")),
bottom = textGrob("Firm Transparency Condition", gp = gpar(cex = .8, fontface = "bold"))) -> p
ggarrange(p2 + rremove("ylab") + rremove("xlab"),
p1 + rremove("ylab") + rremove("xlab"),
ncol = 2, common.legend = TRUE) |>
annotate_figure( left = textGrob("Mean Ratings", rot = 90, vjust = 1, gp = gpar(cex = .8, fontface = "bold")),
bottom = textGrob("Firm Transparency Condition", gp = gpar(cex = .8, fontface = "bold"))) -> p
plot_did <- function(df=d_plot, dv, signif=c("*","*","*"), yaxis=TRUE, ypos=c(100, 100, 114)) {
d_plot <- df |>
filter(DV == dv)
se_width <- 1.96
ggplot(data = d_plot, aes(x=Transparency, y=mean, fill=`Marketing Label`)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=10)
) +
geom_signif(
y_position = ypos, xmin = c(0.8, 1.8, 1.0), xmax = c(1.2, 2.2, 2.0),
annotation = signif, tip_length = 0.1, color='black', size = .25, textsize = 3.5
) +
scale_fill_grey() +
scale_color_grey() +
ggtitle(dv) +
xlab("Transparency") +
ylab("Response") +
scale_y_continuous(limits = c(0,118), breaks = c(0,20,40,60,80,100)) -> p
if(!yaxis) {
p <- p +
theme( axis.line.y = element_line(color = "white"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
}
return(p)
}
plot_did(dv = "Human Liability", signif = c("*", "ns", "*"), yaxis=F) -> p1
plot_did(dv = "Firm Liability", signif = c("*", "ns", "+"), ypos = c(80,80,94))  -> p2
ggarrange(p2 + rremove("ylab") + rremove("xlab"),
p1 + rremove("ylab") + rremove("xlab"),
ncol = 2, common.legend = TRUE) |>
annotate_figure( left = textGrob("Mean Ratings", rot = 90, vjust = 1, gp = gpar(cex = .8, fontface = "bold")),
bottom = textGrob("Firm Transparency Condition", gp = gpar(cex = .8, fontface = "bold"))) -> p
p
ggsave("firm_transparency.jpg", device = "jpg",width = 5.3, height = 3.7, units = "in")
## HUMAN COMBINED
### ANOVA
h_anova <- aov(human ~ as.factor(label) * as.factor(transparency), data = d)
summary(h_anova)
anova_stats(h_anova)
## FIRM COMBINED
### ANOVA
f_anova <- aov(firm ~ as.factor(label) * as.factor(transparency), data = d)
summary(f_anova)
anova_stats(f_anova)
setwd("/Users/jho/Dropbox (Harvard University)/Julian/av_mislabeling_liability/e8_attenuating_benefits")
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
source('../e2_liability/process.R')
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
df |>
mutate_if(all.is.numeric, as.numeric) -> df
# ATTENTION CHECKS
n_initial <- nrow(df)
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS
df |>
filter(comp_1 == 2 & comp_2 == 4) -> df
n_comprehension <- nrow(df); n_comprehension
# Rearranging
df |>
mutate(auto_1 = ifelse(is.na(auto_1), auto_1_ad, auto_1),
co_1 = ifelse(is.na(co_1), co_1_ad, co_1)) -> df
auto <- df[,c("auto_1","ad_1","resp_software1_10","resp_human1_10",
"liable_firm1_1", "liable_human1_1", "comp_3", "age", "gender")]
co <- df[,c("co_1","ad_2","resp_software2_10","resp_human2_10",
"liab_firm2_1", "liab_human2_1", "comp_4", "age", "gender")]
new_colnames <- c("capability", "comp_4", "r_soft", "r_human", "l_firm", "l_human", "comp_3", "age", "gender")
colnames(auto) <- new_colnames
colnames(co) <- new_colnames
auto$label <- "auto"
auto$benefits <- ifelse(is.na(auto$comp_4), "Absent", "Present")
co$label <- "co"
co$benefits <- ifelse(is.na(co$comp_4), "Absent", "Present")
d <- rbind(auto,co)
d <- d[!is.na(d$capability),]
# COMPREHENSION CHECKS 3 & 4
d |>
filter((comp_3 == 2 & label == "auto") | (comp_3 == 1 & label == "co")) -> d
d |>
filter((comp_4 == 1 | is.na(comp_4))) -> d
n_comprehension <- nrow(d)
n_attention - n_comprehension
#=================================================================================
# PARTICIPANT CHARACTERISTICS
#=================================================================================
# AGE
mean(d$age) # filtering the ones who put year
# GENDER
prop_male <- prop.table(table(d$gender))[[1]]; prop_male
#=================================================================================
# ANOVA and t-tests
#=================================================================================
cronbach.alpha(d[,c("r_soft", "l_firm")])
cronbach.alpha(d[,c("r_human", "l_human")])
d$firm <- rowMeans(d[,c("r_soft", "l_firm")])
d$human <- rowMeans(d[,c("r_human", "l_human")])
# CAPABILITY
a <- aov(capability ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
# FIRM
a <- aov(firm ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
### t-tests
t1 <- t.test(d[d$benefits == 'Present' & d$label == 'auto',]$firm,
d[d$benefits == 'Present' & d$label == 'co',]$firm, paired = FALSE)
t1
sd(d[d$benefits == 'Present' & d$label == 'auto',]$firm)
sd(d[d$benefits == 'Present' & d$label == 'co',]$firm)
cohen.d(d[d$benefits == 'Present' & d$label == 'auto',]$firm,
d[d$benefits == 'Present' & d$label == 'co',]$firm)
t2 <- t.test(d[d$benefits == 'Absent' & d$label == 'auto',]$firm,
d[d$benefits == 'Absent' & d$label == 'co',]$firm, paired = FALSE)
t2
sd(d[d$benefits == 'Absent' & d$label == 'auto',]$firm)
sd(d[d$benefits == 'Absent' & d$label == 'co',]$firm)
cohen.d(d[d$benefits == 'Absent' & d$label == 'auto',]$firm,
d[d$benefits == 'Absent' & d$label == 'co',]$firm)
# HUMAN
a <- aov(human ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
# FIRM
a <- aov(firm ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
# HUMAN
a <- aov(human ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
