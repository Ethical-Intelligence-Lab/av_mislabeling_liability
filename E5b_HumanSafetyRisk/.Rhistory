llm <- read_csv("data.csv")
llm |>
select(id, score, flags) |>
rename(llm_score = score) -> llm
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total)) -> df
ggplot(df, aes(x=total, y=llm_score, color = flags)) +
geom_point()
mit <- read_csv("ClimateCombined.csv")
llm <- read_csv("data.csv")
llm |>
select(id, score, flags) |>
rename(llm_score = score) -> llm
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total)) -> df
ggplot(df, aes(x=total, y=llm_score, color = flags)) +
geom_point()
mit <- read_csv("ClimateCombined.csv")
llm <- read_csv("data.csv")
llm |>
select(id, score, flags) |>
rename(llm_score = score) -> llm
mit <- read_csv("ClimateCombined.csv")
llm <- read_csv("data.csv")
llm |>
select(id, score, flags) |>
rename(llm_score = score) -> llm
library(tidyverse)
mit <- read_csv("ClimateCombined.csv")
llm <- read_csv("data.csv")
llm |>
select(id, score, flags) |>
rename(llm_score = score) -> llm
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total)) -> df
ggplot(df, aes(x=total, y=llm_score, color = flags)) +
geom_point()
llm <- read_csv("data.csv")
colnames(llm)
llm |>
select(id, score, flags, Impact-score) |>
rename(llm_score = score) -> llm
mit <- read_csv("ClimateCombined.csv")
llm <- read_csv("data.csv")
llm |>
select(id, score, flags, Impact-score) |>
rename(llm_score = score) -> llm
llm |>
select(id, score, flags, `Impact-score`) |>
rename(llm_score = score) -> llm
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total)) -> df
View(df)
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total),
impact = ifelse(is.na(total), 0, impact)) -> df
mit <- read_csv("ClimateCombined.csv")
llm <- read_csv("data.csv")
llm |>
select(id, score, flags, `Impact-score`) |>
rename(llm_score = score,
llm_impact = `Impact-score`) -> llm
library(tidyverse)
mit <- read_csv("ClimateCombined.csv")
llm <- read_csv("data.csv")
llm |>
select(id, score, flags, `Impact-score`) |>
rename(llm_score = score,
llm_impact = `Impact-score`) -> llm
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total),
impact = ifelse(is.na(total), 0, impact)) -> df
ggplot(df, aes(x=impact, y=llm_impact, color = flags)) +
geom_point()
summary(lm(impact ~ llm_impact, df))
library(tidyverse)
library(readxl)
df <- read_excel("Climate.xlsx") |>
select(`Solution ID`, `What specific problem are you solving?`, `What is your solution?`)
colnames(df) <- c("id", "problem", "solution")
df$problem <- sapply(df$problem, function(i) gsub("<[^>]*>", "", i))
df$solution <- sapply(df$solution, function(i) gsub("<[^>]*>", "", i))
write.csv(df, "ps_climate.csv", row.names = F)
eval <- read_excel("ClimateEval.xlsx", sheet = "Semifinalist Selection") |>
select(solution_id, Alignment, `Potential for Impact`, `Feasibility`,
`Innovative Approach`, `Inclusive Human-Centered Design`, total)
colnames(eval) <- c("id", "alignment", "impact", "feasibility", "novelty", "inclusivity", "total")
eval |>
group_by(id) |>
summarise_all(mean) -> eval
df |>
left_join(eval, by = "id") |>
mutate(filtered = ifelse(is.na(total), T, F)) -> df
df |>
filter(!filtered) |>
select(id, problem, solution) -> semi
write.csv(semi, "semifinalist_ps_climate.csv", row.names = F)
write.csv(df, "ClimateCombined.csv", row.names = F)
library(tidyverse)
mit <- read_csv("ClimateCombined.csv")
llm <- read_csv("data.csv")
llm |>
select(id, score, flags, `Impact-score`) |>
rename(llm_score = score,
llm_impact = `Impact-score`) -> llm
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total),
impact = ifelse(is.na(total), 0, impact)) -> df
ggplot(df, aes(x=impact, y=llm_impact, color = flags)) +
geom_point()
summary(lm(impact ~ llm_impact, df))
ggplot(df, aes(x=score, y=llm_score, color = flags)) +
geom_point()
ggplot(df, aes(x=total, y=llm_score, color = flags)) +
geom_point()
summary(lm(impact ~ llm_impact, df))
View(eval)
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total),
impact = ifelse(is.na(total), 0, impact)) |>
filter(total != 0) -> df
ggplot(df, aes(x=total, y=llm_score, color = flags)) +
geom_point()
summary(lm(impact ~ llm_impact, df))
summary(lm(total ~ llm_score, df))
View(df)
library(tidyverse)
mit <- read_csv("ClimateCombined.csv")
llm <- read_csv("data.csv")
llm |>
select(id, score, flags, `Impact-score`) |>
rename(llm_score = score,
llm_impact = `Impact-score`) -> llm
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total),
impact = ifelse(is.na(total), 0, impact)) |>
filter(total != 0) -> df
ggplot(df, aes(x=total, y=llm_score, color = flags)) +
geom_point()
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total),
impact = ifelse(is.na(total), 0, impact))  -> df
ggplot(df, aes(x=total, y=llm_score, color = flags)) +
geom_point()
summary(lm(total ~ llm_score, df))
library(tidyverse)
mit <- read_csv("ClimateCombined.csv")
llm <- read_csv("full_data.csv")
llm |>
select(id, score, flags, `Impact-score`) |>
rename(llm_score = score,
llm_impact = `Impact-score`) -> llm
mit |>
inner_join(llm, by = "id") |>
mutate(total = ifelse(is.na(total), 0, total),
impact = ifelse(is.na(total), 0, impact))  -> df
ggplot(df, aes(x=total, y=llm_score, color = flags)) +
geom_point()
setwd("/Users/jho/Downloads/CircularEconomy")
df <- read_excel("CE.xlsx") |>
select(`Solution ID`, `What specific problem are you solving?`, `What is your solution?`)
library(tidyverse)
library(readxl)
df <- read_excel("CE.xlsx") |>
select(`Solution ID`, `What specific problem are you solving?`, `What is your solution?`)
df <- read_excel("CE.xlsx") |>
select(`Solution ID`, `What is the problem you are solving?`, `Pitch us on your solution`)
View(df)
colnames(df) <- c("id", "problem", "solution")
df$problem <- sapply(df$problem, function(i) gsub("<[^>]*>", "", i))
df$solution <- sapply(df$solution, function(i) gsub("<[^>]*>", "", i))
eval <- read_excel("CE_Evaluations.xlsx", sheet = "Semifinalist Selection") |>
select(solution_id, Alignment, `Potential for Impact`, `Feasibility`,
`Innovative Approach`, `Inclusive Human-Centered Design`, total)
eval <- read_excel("CE_Evaluations.xlsx", sheet = "Semifinalist Selection")
View(eval)
eval <- read_excel("CE_Evaluations.xlsx", sheet = "Semifinalist Selection")|>
select(`Solution ID`, alignment, impact, `feasibility`, novelty, `Total Score`)
colnames(eval) <- c("id", "alignment", "impact", "feasibility", "novelty", "total")
eval |>
group_by(id) |>
summarise_all(mean) -> eval
View(eval)
eval |>
group_by(id) |>
summarise_all(function (i) mean(i, rm.na = T)) -> eval
View(eval)
eval |>
group_by(id) |>
summarise_all(function (i) mean(i, na.rm = T)) -> eval
View(eval)
library(tidyverse)
library(readxl)
df <- read_excel("CE.xlsx") |>
select(`Solution ID`, `What is the problem you are solving?`, `Pitch us on your solution`)
colnames(df) <- c("id", "problem", "solution")
df$problem <- sapply(df$problem, function(i) gsub("<[^>]*>", "", i))
df$solution <- sapply(df$solution, function(i) gsub("<[^>]*>", "", i))
write.csv(df, "ps_CE.csv", row.names = F)
eval <- read_excel("CE_Evaluations.xlsx", sheet = "Semifinalist Selection")|>
select(`Solution ID`, alignment, impact, `feasibility`, novelty, `Total Score`)
colnames(eval) <- c("id", "alignment", "impact", "feasibility", "novelty", "total")
eval |>
group_by(id) |>
summarise_all(mean) |>
drop_na() -> eval
df |>
left_join(eval, by = "id") |>
mutate(filtered = ifelse(is.na(total), T, F)) -> df
df |>
filter(!filtered) |>
select(id, problem, solution) -> semi
df |>
left_join(eval, by = "id")  -> df
View(df)
library(tidyverse)
library(readxl)
df <- read_excel("CE.xlsx") |>
select(`Solution ID`, `What is the problem you are solving?`, `Pitch us on your solution`)
colnames(df) <- c("id", "problem", "solution")
df$problem <- sapply(df$problem, function(i) gsub("<[^>]*>", "", i))
df$solution <- sapply(df$solution, function(i) gsub("<[^>]*>", "", i))
write.csv(df, "ps_CE.csv", row.names = F)
eval <- read_excel("CE_Evaluations.xlsx", sheet = "Semifinalist Selection")|>
select(`Solution ID`, alignment, impact, `feasibility`, novelty, `Total Score`)
colnames(eval) <- c("id", "alignment", "impact", "feasibility", "novelty", "total")
eval |>
group_by(id) |>
summarise_all(mean) |>
drop_na() -> eval
df |>
left_join(eval, by = "id")  -> df
write.csv(df, "ClimateCombined.csv", row.names = F)
write.csv(df, "CECombined.csv", row.names = F)
library(tidyverse)
mit <- read_csv("CECombined.csv")
llm <- read_csv("data.csv")
llm |>
select(id, score, flags, `Impact-score`) |>
rename(llm_score = score,
llm_impact = `Impact-score`) -> llm
View(llm)
llm |>
select(id, score, flags) |>
rename(llm_score = score) -> llm
mit |>
inner_join(llm, by = "id")   -> df
View(df)
mit |>
inner_join(llm, by = "id") |>
drop_na() -> df
ggplot(df, aes(x=total, y=llm_score, color = flags)) +
geom_point()
summary(lm(total ~ llm_score, df))
cor(df$total, df$llm_score)
colnames(llm)
llm <- read_csv("data.csv")
colnames(llm)
llm <- read_csv("data.csv")
colnames(llm)
llm |>
select(id, score, flags, `Adherence to Circular Economy Principles-score`,
`Maturity Stage-score`, `Market Potential-score`, `Feasibility-score`,
`Scalability-score`) |>
rename(llm_score = score) -> llm
colnames(llm) <- c("id", "llm_score", "flags", "alignment", "maturity",
"market_potential", "feasibility", "scalability")
mit |>
inner_join(llm, by = "id") |>
drop_na() -> df
View(df)
library(tidyverse)
mit <- read_csv("CECombined.csv")
llm <- read_csv("data.csv")
colnames(llm)
llm |>
select(id, score, flags, `Adherence to Circular Economy Principles-score`,
`Maturity Stage-score`, `Market Potential-score`, `Feasibility-score`,
`Scalability-score`) |>
rename(llm_score = score) -> llm
colnames(llm) <- c("id", "llm_score", "flags", "llm_alignment", "maturity",
"market_potential", "llm_feasibility", "llm_scalability")
mit |>
inner_join(llm, by = "id") |>
drop_na() -> df
View(df)
lmod <- lm(total ~ llm_alignment + maturity + market_potential + llm_feasibility + llm_scalability, df)
summary(lmod)
lmod <- lm(total ~ maturity + market_potential + llm_feasibility + llm_scalability, df)
summary(lmod)
lmod <- lm(total ~ llm_alignment + maturity + market_potential + llm_feasibility + llm_scalability, df)
summary(lmod)
lmod <- lm(total ~ llm_alignment + maturity + market_potential + llm_feasibility*llm_scalability, df)
summary(lmod)
lmod <- lm(total ~ llm_alignment + maturity + market_potential*llm_feasibility*llm_scalability, df)
summary(lmod)
lmod <- lm(total ~ llm_alignment*maturity*market_potential*llm_feasibility*llm_scalability, df)
summary(lmod)
lmod <- lm(total ~ llm_alignment + maturity + market_potential*llm_feasibility*llm_scalability, df)
lmod <- lm(total ~ llm_alignment + maturity + market_potential + llm_feasibility*llm_scalability, df)
lmod <- lm(total ~ llm_alignment + maturity + market_potential + llm_feasibility*llm_scalability, df)
summary(lmod)
lmod <- lm(total ~ llm_alignment + maturity + market_potential * llm_feasibility * llm_scalability, df)
summary(lmod)
lmod <- lm(total ~ llm_alignment + maturity * market_potential * llm_feasibility * llm_scalability, df)
summary(lmod)
lmod <- lm(total ~ llm_alignment + maturity + market_potential * llm_feasibility * llm_scalability, df)
summary(lmod)
lmod$fitted.values
df$fitted <- lmod$fitted.values
ggplot(df, aes(x=total, y=fitted, color = flags)) +
geom_point()
lmod <- lm(total ~ llm_alignment + maturity + market_potential * llm_feasibility * llm_scalability, df)
summary(lmod)
cor(df$fitted, df$total)
View(df)
ggplot(df, aes(x=alignment, y=llm_alignment, color = flags)) +
geom_point()
lmod <- lm(total ~ llm_alignment^2 + maturity + market_potential * llm_feasibility * llm_scalability, df)
summary(lmod)
lmod <- lm(total ~ llm_alignment + maturity + market_potential * llm_feasibility * llm_scalability, df)
summary(lmod)
df$fitted <- lmod$fitted.values
ggplot(df, aes(x=total, y=fitted, color = flags)) +
geom_point()
cor(df$alignment, df$llm_alignment)
cor(df$feasibility, df$llm_feasibility)
?t.test
prop.test
?prop.test
?rbinom
rbinom(1000, 1, .8)
prop.test(x, n= 1000, p = 0.5)
x <- rbinom(1000, 1, .8)
prop.test(x, n= 1000, p = 0.5)
prop.test(x, n = length(x), p = 0.5)
x <- rbinom(1000, 1, .8)
prop.test(x, n = length(x), p = 0.5)
length(x)
x <- rbinom(1000, 1, .8)
prop.test(x, n = length(x), p = 0.5)
x <- rbinom(1, 1000, .8)
prop.test(x, n = length(x), p = 0.5)
heads <- rbinom(1, size = 100, prob = .5)
x <- rbinom(1000, 1,.8)
prop.test(x, n = length(x), p = 0.5)
prop.test(sum(x), n = length(x
) , p = 0.5)
setwd("/Users/jho/Dropbox (Harvard University)/Julian")
setwd("/Users/jho/Dropbox (Harvard University)/Julian/av_mislabeling_liability/E5b_HumanSafetyRisk")
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
source('../process.r')
# Read full dataset
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
df |>
mutate_if(all.is.numeric, as.numeric) -> df
# ATTENTION CHECKS
n_initial <- nrow(df)
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS
df |>
filter(comp_1 == 2 & comp_2 == 4) -> df
n_comprehension <- nrow(df); n_comprehension
# Rearranging
df |>
mutate(auto_1 = ifelse(is.na(auto_1), auto_1_ad, auto_1),
co_1 = ifelse(is.na(co_1), co_1_ad, co_1)) -> df
auto <- df[,c("auto_1","ad_1","resp_software1_10","resp_human1_10",
"liable_firm1_1", "liable_human1_1", "comp_3", "age", "gender")]
co <- df[,c("co_1","ad_2","resp_software2_10","resp_human2_10",
"liab_firm2_1", "liab_human2_1", "comp_4", "age", "gender")]
new_colnames <- c("capability", "comp_4", "r_soft", "r_human", "l_firm", "l_human", "comp_3", "age", "gender")
colnames(auto) <- new_colnames
colnames(co) <- new_colnames
auto$label <- "auto"
auto$benefits <- ifelse(is.na(auto$comp_4), "Absent", "Present")
co$label <- "co"
co$benefits <- ifelse(is.na(co$comp_4), "Absent", "Present")
d <- rbind(auto,co)
d <- d[!is.na(d$capability),]
# COMPREHENSION CHECKS 3 & 4
d |>
filter((comp_3 == 2 & label == "auto") | (comp_3 == 1 & label == "co")) -> d
d |>
filter((comp_4 == 1 | is.na(comp_4))) -> d
n_comprehension <- nrow(d)
n_attention - n_comprehension
# AGE
mean(d$age) # filtering the ones who put year
# GENDER
prop_male <- prop.table(table(d$gender))[[1]]; prop_male
cronbach.alpha(d[,c("r_soft", "l_firm")])
cronbach.alpha(d[,c("r_human", "l_human")])
# FIRM
a <- aov(firm ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
cronbach.alpha(d[,c("r_soft", "l_firm")])
cronbach.alpha(d[,c("r_human", "l_human")])
d$firm <- rowMeans(d[,c("r_soft", "l_firm")])
d$human <- rowMeans(d[,c("r_human", "l_human")])
# FIRM
a <- aov(firm ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
t2 <- t.test(d[d$benefits == 'Absent' & d$label == 'auto',]$firm,
d[d$benefits == 'Absent' & d$label == 'co',]$firm, paired = FALSE)
t2
sd(d[d$benefits == 'Absent' & d$label == 'auto',]$firm)
sd(d[d$benefits == 'Absent' & d$label == 'co',]$firm)
cohen.d(d[d$benefits == 'Absent' & d$label == 'auto',]$firm,
d[d$benefits == 'Absent' & d$label == 'co',]$firm)
### t-tests
t1 <- t.test(d[d$benefits == 'Present' & d$label == 'auto',]$firm,
d[d$benefits == 'Present' & d$label == 'co',]$firm, paired = FALSE)
t1
sd(d[d$benefits == 'Present' & d$label == 'auto',]$firm)
sd(d[d$benefits == 'Present' & d$label == 'co',]$firm)
cohen.d(d[d$benefits == 'Present' & d$label == 'auto',]$firm,
d[d$benefits == 'Present' & d$label == 'co',]$firm)
# HUMAN
a <- aov(human ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
# Benefit FIRM
t1 <- t.test(d[d$benefits == 'Present',]$firm,
d[d$benefits == 'Absent',]$firm, paired = FALSE)
t1
sd(d[d$benefits == 'Present',]$firm)
sd(d[d$benefits == 'Absent',]$firm)
cohen.d(d[d$benefits == 'Present',]$firm,
d[d$benefits == 'Absent',]$firm)
# HUMAN
a <- aov(human ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
t1 <- t.test(d[d$benefits == 'Present' & d$label == 'auto',]$human,
d[d$benefits == 'Present' & d$label == 'co',]$human, paired = FALSE)
t1
sd(d[d$benefits == 'Present' & d$label == 'auto',]$human)
sd(d[d$benefits == 'Present' & d$label == 'co',]$human)
cohen.d(d[d$benefits == 'Present' & d$label == 'auto',]$human,
d[d$benefits == 'Present' & d$label == 'co',]$human)
t2 <- t.test(d[d$benefits == 'Absent' & d$label == 'auto',]$human,
d[d$benefits == 'Absent' & d$label == 'co',]$human, paired = FALSE)
t2
cohen.d(d[d$benefits == 'Present' & d$label == 'auto',]$human,
d[d$benefits == 'Present' & d$label == 'co',]$human)
t2 <- t.test(d[d$benefits == 'Absent' & d$label == 'auto',]$human,
d[d$benefits == 'Absent' & d$label == 'co',]$human, paired = FALSE)
t2
sd(d[d$benefits == 'Absent' & d$label == 'auto',]$human)
sd(d[d$benefits == 'Absent' & d$label == 'co',]$human)
cohen.d(d[d$benefits == 'Absent' & d$label == 'auto',]$human,
d[d$benefits == 'Absent' & d$label == 'co',]$human)
t2 <- t.test(d[d$benefits == 'Present',]$human,
d[d$benefits == 'Absent',]$human, paired = FALSE)
t2
sd(d[d$benefits == 'Present',]$human)
sd(d[d$benefits == 'Absent',]$human)
cohen.d(d[d$benefits == 'Present',]$human,
d[d$benefits == 'Absent',]$human)
d_process <- d
d_process$label <- as.numeric(as.factor(d_process$label))
d_process$benefits <- as.numeric(as.factor(d_process$benefits))
# FIRM COMBINED
process(data = d_process, y = "firm", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# HUMAN COMBINED
process(data = d_process, y = "human", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
