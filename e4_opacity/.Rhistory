# Apply PROCESS
process(data = df_num, y = "resp_soft", x = "label", w = "transparency",
m = "capability", model = 14, boot = 10000 , modelbt = 1, seed = 654321)
process(data = df_num, y = "liable_soft", x = "label", w = "transparency",
m = "capability", model = 14, boot = 10000 , modelbt = 1, seed = 654321)
process(data = df_num, y = "resp_human", x = "label", w = "transparency",
m = "capability", model = 14, boot = 10000 , modelbt = 1, seed = 654321)
process(data = df_num, y = "liable_human", x = "label", w = "transparency",
m = "capability", model = 14, boot = 10000 , modelbt = 1, seed = 654321)
#===============================================================================
# Regressions
#================================================================================
# Capability as a continuous variable
reg1 <- lm(resp_soft ~ transparency*capability, df_comb)
summary(reg1)
reg2 <- lm(resp_human ~ transparency*capability, df_comb)
summary(reg2)
### Testing
reg3 <- lm(liable_soft ~ transparency*capability, df_comb)
summary(reg3)
reg4 <- lm(liable_human ~ transparency*capability, df_comb)
summary(reg4)
prev <- read_csv("avc_e6.csv")
setdiff(prev$ResponseId, df$ResponseId)
setdiff(df$ResponseId, prev$ResponseId)
len(setdiff(df$ResponseId, prev$ResponseId))
length(setdiff(df$ResponseId, prev$ResponseId))
View(prev)
prev <- read_csv("avc_e6.csv")
df <- read_csv("avc_e6_full.csv")
df <- df[-c(1,2),]
exclude <- setdiff(df$ResponseId, prev$ResponseId)
df <- df[exclude,]
# Perform Exclusions
df |>
filter(
att_1 == 2,
att_2 == 2,
comp_1 == 2,
comp_2 == 4,
comp_3 == 1
) -> df
# Rename column and labels
df$cond <- df$FL_12_DO
df$cond[df$cond == "FL_35"] <- "auto_op"
df$cond[df$cond == "FL_36"] <- "co_op"
df$cond[df$cond == "FL_50"] <- "auto_ft"
df$cond[df$cond == "FL_54"] <- "co_ft"
# Exclude more (based on Stuti's code)
df |>
filter((cond == 'auto_op' & comp_4 == 2 |
cond == 'auto_ft' & comp_4 == 3 |
cond == 'co_op' & comp_4 == 2   |
cond == 'co_ft' & comp_4 == 3     )) -> df
# Identify transparency and labels
df |>
mutate(
transparency = ifelse(grepl("op", cond), "no", "yes"),
label = ifelse(grepl("auto", cond), "auto", "co"),
) -> df
std_colnames <- c("id", "cond", "transparency", "label", "resp_soft", "resp_human",
"liable_soft", "liable_human", "capability")
auto_op <- df |>
filter(cond == "auto_op") |>
select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}1_[0-9]{1,}"), auto_1)
colnames(auto_op) <- std_colnames
auto_ft <- df |>
filter(cond == "auto_ft") |>
select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}3_[0-9]{1,}"), auto_2)
colnames(auto_ft) <- std_colnames
co_op <- df |>
filter(cond == "co_op") |>
select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}2_[0-9]{1,}"), co_1)
colnames(co_op) <- std_colnames
co_ft <- df |>
filter(cond == "co_ft") |>
select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}4_[0-9]{1,}"), co_2)
colnames(co_ft) <- std_colnames
df_comb <- rbind(auto_ft, co_ft, co_op, auto_op)
df_comb |>
mutate_at(
c("resp_soft", "resp_human", "liable_soft", "liable_human", "capability"),
as.numeric
) -> df_comb
# Defined capable as a binary variable with the threshold at 4
df_comb |>
mutate(capable = ifelse(capability < 4, "no", "yes")) -> df_comb
rm(auto_ft, co_ft, co_op, auto_op)
# Plot capability, Human Responsible, transparency and label
hr <- ggplot(df_comb, aes(x=transparency, y=resp_human, color=capable, fill=capable))+
geom_violin(width = 0.9, alpha = 0.35, size = 0.75) +
ylab("Human Responsible") +
theme_light()
# Plot capability, Software Responsible, transparency and label
sr <- ggplot(df_comb, aes(x=transparency, y=resp_soft, color=capable, fill=capable))+
geom_violin(width = 0.9, alpha = 0.35, size = 0.75) +
ylab("Software Responsible") +
theme_light()
# Plot capability, Human Liable, transparency and label
hl <- ggplot(df_comb, aes(x=transparency, y=liable_human, color=capable, fill=capable))+
geom_violin(width = 0.9, alpha = 0.35, size = 0.75) +
ylab("Human Liable") +
theme_light()
# Plot capability, Software Liable, transparency and label
sl <- ggplot(df_comb, aes(x=transparency, y=liable_soft, color=capable, fill=capable))+
geom_violin(width = 0.9, alpha = 0.35, size = 0.75) +
ylab("Software Liable") +
theme_light()
df_comb |>
gather(key = "DV", value = "Rating", resp_soft, resp_human, liable_soft, liable_human) |>
mutate(
DV = case_when( DV == "liable_human" ~ "Human is Liable",
DV == "liable_soft" ~ "Software is Liable",
DV == "resp_human" ~ "Human is Responsible",
DV == "resp_soft" ~ " Software is Responsible",)
) |>
group_by(capable, DV) |>
mutate(
mean = mean(Rating),
std = sd(Rating)
) -> df2
sd_width <- 1
plot <- ggplot(df2, aes(x=transparency, y=Rating, color=capable, fill=capable))+
geom_violin(width = 0.9, alpha = 0.35, size = 0.75) +
geom_errorbar(aes(ymin=mean-(std*sd_width), ymax=mean+(std*sd_width)), position = "dodge", size=.25) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.75) +
facet_wrap(vars(DV), nrow = 2) +
theme_light()
plot
#===============================================================================
# Regressions
#================================================================================
# Capability as a continuous variable
reg1 <- lm(resp_soft ~ transparency*capability, df_comb)
summary(reg1)
reg2 <- lm(resp_human ~ transparency*capability, df_comb)
summary(reg2)
### Testing
reg3 <- lm(liable_soft ~ transparency*capability, df_comb)
summary(reg3)
reg4 <- lm(liable_human ~ transparency*capability, df_comb)
summary(reg4)
stargazer(reg1, reg2, reg3, reg4)
setwd("/Users/jho/Dropbox (Harvard University)/Justin/KeywordAnalysis/1_Data")
library(tidyverse)
df <- read_csv("unigram_probkey.csv")
View(df)
uni_s <- read_csv("unigram_solkey.csv")
uni_p <- read_csv("unigram_probkey.csv")
function (x, df1, df2, ncp, log = FALSE)
uni_s <- read_csv("unigram_solkey.csv")
uni_s <- read_csv("unigram_solkey.csv")
View(uni_s)
uni_p |>
left_join(uni_s, by=c("ps_index", "level"))
uni_p |>
left_join(uni_s, by=c("ps_index", "level")) |>
drop_duplicate()
uni_p |>
left_join(uni_s, by=c("ps_index", "level")) |>
unique()
View(uni_p)
uni_p |>
group_by(level, problem_key) |>
summarize( count = n() )
uni_p |>
group_by(level, problem_key) |>
summarize( count = n() ) -> uni_pcount
View(uni_pcount)
View(uni_p)
View(uni_pcount)
uni_p |>
group_by(level, problem_key) |>
summarize( count = n() ) |>
mutate( max_count = max(count) )-> uni_pcount
View(uni_pcount)
uni_p |>
group_by(level, problem_key) |>
summarize( count = n() ) |>
mutate( max_count = max(count) ) |>
filter( count == max_count )-> uni_pcount
View(uni_pcount)
uni_s |>
group_by(level, solution_key) |>
summarize( count = n() ) |>
mutate( max_count = max(count) ) |>
filter( count == max_count )-> uni_scount
View(uni_scount)
View(uni_p)
uni_p |>
group_by(level, problem_key) |>
summarize( count = n() ) |>
mutate( max_count = max(count) ) |>
filter( count == max_count ) |>
mutate( type = "unigram problem") -> uni_pcount
bi_p <- read_csv("bigram_probkey.csv")
bi_s <- read_csv("bigram_solkey.csv")
bi_p |>
group_by(level, problem_key) |>
summarize( count = n() ) |>
mutate( max_count = max(count) ) |>
filter( count == max_count ) |>
mutate( type = "bigram problem") -> bi_pcount
bi_s |>
group_by(level, solution_key) |>
summarize( count = n() ) |>
mutate( max_count = max(count) ) |>
filter( count == max_count ) |>
mutate( type = "bigram solution")-> bi_scount
View(bi_pcount)
View(bi_scount)
View(uni_s)
View(uni_scount)
library(tidyverse)
uni_p <- read_csv("unigram_probkey.csv")
uni_s <- read_csv("unigram_solkey.csv")
uni_p |>
group_by(level, problem_key) |>
summarize( count = n() ) |>
mutate( max_count = max(count) ) |>
filter( count == max_count ) |>
mutate( type = "unigram problem") -> uni_pcount
uni_s |>
group_by(level, solution_key) |>
summarize( count = n() ) |>
mutate( max_count = max(count) ) |>
filter( count == max_count ) |>
mutate( type = "unigram solution")-> uni_scount
bi_p <- read_csv("bigram_probkey.csv")
bi_s <- read_csv("bigram_solkey.csv")
bi_p |>
group_by(level, problem_key) |>
summarize( count = n() ) |>
mutate( max_count = max(count) ) |>
filter( count == max_count ) |>
mutate( type = "bigram problem") -> bi_pcount
bi_s |>
group_by(level, solution_key) |>
summarize( count = n() ) |>
mutate( max_count = max(count) ) |>
filter( count == max_count ) |>
mutate( type = "bigram solution")-> bi_scount
View(bi_pcount)
View(bi_pcount)
uni_p <- read_csv("unigram_probkey.csv")
uni_s <- read_csv("unigram_solkey.csv")
uni_p |>
group_by(level, problem_key) |>
summarize( count = n() ) |>
arrange(desc(count)) |>
slice(1:5) |>
mutate( type = "unigram problem") -> uni_pcount
uni_s |>
group_by(level, solution_key) |>
summarize( count = n() ) |>
arrange(desc(count)) |>
slice(1:5) |>
mutate( type = "unigram solution")-> uni_scount
bi_p <- read_csv("bigram_probkey.csv")
bi_s <- read_csv("bigram_solkey.csv")
bi_p |>
group_by(level, problem_key) |>
summarize( count = n() ) |>
arrange(desc(count)) |>
slice(1:5) |>
mutate( type = "bigram problem") -> bi_pcount
bi_s |>
group_by(level, solution_key) |>
summarize( count = n() ) |>
arrange(desc(count)) |>
slice(1:5) |>
mutate( type = "bigram solution")-> bi_scount
View(bi_pcount)
colnames(uni_pcount)
colnames(uni_pcount) <- c("level", "keyword", "count", "type" )
colnames(uni_scount) <- c("level", "keyword", "count", "type" )
colnames(bi_pcount) <- c("level", "keyword", "count", "type" )
colnames(bi_scount) <- c("level", "keyword", "count", "type" )
df <- rbind(uni_pcount, uni_scount, bi_pcount, bi_scount)
View(df)
ggplot(data=df, aes(x=keyword, y=count, color=level, fill=level)) +
geom_bar()
ggplot(data=df, aes(x=keyword, y=count, color=level, fill=level)) +
geom_bar(stat="identity", position ="dodge")
ggplot(data=df, aes(x=keyword, y=count, color=level, fill=level)) +
geom_bar(stat="identity", position ="dodge") +
facet_wrap(~type, ncol=2)
ggplot(data=df, aes(x=keyword, y=count, color=level, fill=level)) +
geom_bar(stat="identity", position ="dodge") +
facet_wrap(~type, ncol=2, scales=("free_x", "free_y"))
ggplot(data=df, aes(x=keyword, y=count, color=level, fill=level)) +
geom_bar(stat="identity", position ="dodge") +
facet_wrap(~type, ncol=2, scales="free")
library(tidyverse)
uni_p <- read_csv("unigram_probkey.csv")
uni_s <- read_csv("unigram_solkey.csv")
uni_p |>
group_by(level, problem_key) |>
summarize( count = n() ) |>
arrange(desc(count)) |>
slice(1:1) |>
mutate( type = "unigram problem") -> uni_pcount
uni_s |>
group_by(level, solution_key) |>
summarize( count = n() ) |>
arrange(desc(count)) |>
slice(1:1) |>
mutate( type = "unigram solution")-> uni_scount
bi_p <- read_csv("bigram_probkey.csv")
bi_s <- read_csv("bigram_solkey.csv")
bi_p |>
group_by(level, problem_key) |>
summarize( count = n() ) |>
arrange(desc(count)) |>
slice(1:1) |>
mutate( type = "bigram problem") -> bi_pcount
bi_s |>
group_by(level, solution_key) |>
summarize( count = n() ) |>
arrange(desc(count)) |>
slice(1:1) |>
mutate( type = "bigram solution")-> bi_scount
colnames(uni_pcount) <- c("level", "keyword", "count", "type" )
colnames(uni_scount) <- c("level", "keyword", "count", "type" )
colnames(bi_pcount) <- c("level", "keyword", "count", "type" )
colnames(bi_scount) <- c("level", "keyword", "count", "type" )
df <- rbind(uni_pcount, uni_scount, bi_pcount, bi_scount)
ggplot(data=df, aes(x=keyword, y=count, color=level, fill=level)) +
geom_bar(stat="identity", position ="dodge") +
facet_wrap(~type, ncol=2, scales="free")
setwd("/Users/jho/Dropbox (Harvard University)/av_mislabeling_liability/e4_opacity")
## ================================================================================================================
##                                 Harvard Business School, Ethical Iopelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV RESPONSIBILITY STUDY | EXPERIMEop 5
## ================================================================================================================
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
library(ggpubr)
library(dplyr)
library(sjstats)
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # cooprast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
'anova_stats'
)
library(tidyverse)
library(stargazer)
# Read full dataset
df <- read_csv("avc_e6_full.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Perform Exclusions
df |>
filter(
att_1 == 2,
att_2 == 2,
comp_1 == 2,
comp_2 == 4,
comp_3 == 1
) -> df
# Rename column and labels
df$cond <- df$FL_12_DO
df$cond[df$cond == "FL_35"] <- "auto_op"
df$cond[df$cond == "FL_36"] <- "co_op"
df$cond[df$cond == "FL_50"] <- "auto_ft"
df$cond[df$cond == "FL_54"] <- "co_ft"
# Exclude more (based on Stuti's code)
df |>
filter((cond == 'auto_op' & comp_4 == 2 |
cond == 'auto_ft' & comp_4 == 3 |
cond == 'co_op' & comp_4 == 2   |
cond == 'co_ft' & comp_4 == 3     )) -> df
# Identify transparency and labels
df |>
mutate(
transparency = ifelse(grepl("op", cond), "no", "yes"),
label = ifelse(grepl("auto", cond), "auto", "co"),
) -> df
std_colnames <- c("id", "cond", "transparency", "label", "resp_soft", "resp_human",
"liable_soft", "liable_human", "capability")
auto_op <- df |>
filter(cond == "auto_op") |>
select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}1_[0-9]{1,}"), auto_1)
colnames(auto_op) <- std_colnames
auto_ft <- df |>
filter(cond == "auto_ft") |>
select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}3_[0-9]{1,}"), auto_2)
colnames(auto_ft) <- std_colnames
co_op <- df |>
filter(cond == "co_op") |>
select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}2_[0-9]{1,}"), co_1)
colnames(co_op) <- std_colnames
co_ft <- df |>
filter(cond == "co_ft") |>
select(id, cond, transparency, label, matches("[a-z]{1,}_[a-z]{1,}4_[0-9]{1,}"), co_2)
colnames(co_ft) <- std_colnames
df_comb <- rbind(auto_ft, co_ft, co_op, auto_op)
df_comb |>
mutate_at(
c("resp_soft", "resp_human", "liable_soft", "liable_human", "capability"),
as.numeric
) -> df_comb
# Defined capable as a binary variable with the threshold at 4
df_comb |>
mutate(capable = ifelse(capability < 4, "no", "yes")) -> df_comb
rm(auto_ft, co_ft, co_op, auto_op)
# Plot capability, Human Responsible, transparency and label
hr <- ggplot(df_comb, aes(x=transparency, y=resp_human, color=capable, fill=capable))+
geom_violin(width = 0.9, alpha = 0.35, size = 0.75) +
ylab("Human Responsible") +
theme_light()
# Plot capability, Software Responsible, transparency and label
sr <- ggplot(df_comb, aes(x=transparency, y=resp_soft, color=capable, fill=capable))+
geom_violin(width = 0.9, alpha = 0.35, size = 0.75) +
ylab("Software Responsible") +
theme_light()
# Plot capability, Human Liable, transparency and label
hl <- ggplot(df_comb, aes(x=transparency, y=liable_human, color=capable, fill=capable))+
geom_violin(width = 0.9, alpha = 0.35, size = 0.75) +
ylab("Human Liable") +
theme_light()
# Plot capability, Software Liable, transparency and label
sl <- ggplot(df_comb, aes(x=transparency, y=liable_soft, color=capable, fill=capable))+
geom_violin(width = 0.9, alpha = 0.35, size = 0.75) +
ylab("Software Liable") +
theme_light()
df_comb |>
gather(key = "DV", value = "Rating", resp_soft, resp_human, liable_soft, liable_human) |>
mutate(
DV = case_when( DV == "liable_human" ~ "Human is Liable",
DV == "liable_soft" ~ "Software is Liable",
DV == "resp_human" ~ "Human is Responsible",
DV == "resp_soft" ~ " Software is Responsible",)
) |>
group_by(capable, DV) |>
mutate(
mean = mean(Rating),
std = sd(Rating)
) -> df2
sd_width <- 1
plot <- ggplot(df2, aes(x=transparency, y=Rating, color=capable, fill=capable))+
geom_violin(width = 0.9, alpha = 0.35, size = 0.75) +
geom_errorbar(aes(ymin=mean-(std*sd_width), ymax=mean+(std*sd_width)), position = "dodge", size=.25) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.75) +
facet_wrap(vars(DV), nrow = 2) +
theme_light()
plot
#===============================================================================
# Regressions
#================================================================================
# Capability as a continuous variable
reg1 <- lm(resp_soft ~ transparency*capability, df_comb)
summary(reg1)
reg2 <- lm(resp_human ~ transparency*capability, df_comb)
summary(reg2)
reg3 <- lm(liable_soft ~ transparency*capability, df_comb)
summary(reg3)
reg4 <- lm(liable_human ~ transparency*capability, df_comb)
summary(reg4)
stargazer(reg1, reg2, reg3, reg4)
# Apply PROCESS
process(data = df_num, y = "resp_soft", x = "label", w = "transparency",
m = "capability", model = 14, boot = 10000 , modelbt = 1, seed = 654321)
## ================================================================================================================
##                                                  PROCESS 14 MEDIATION MODERATOR
## ================================================================================================================
source('../e2_liability/process.R')
df_num <- df_comb
# Convert relevant columns into numeric for PROCESS
df_num$label <- as.numeric(ifelse(df_num$label == "auto", 1, 0))
df_num$cond <- as.numeric(as.factor(df_num$cond))
df_num$transparency <- as.numeric(ifelse(df_num$transparency == "yes", 1, 0))
df_num$capable <- as.numeric(ifelse(df_num$capable == "yes", 1, 0))
df_num$resp_soft <- as.numeric(df_num$resp_soft)
# Apply PROCESS
process(data = df_num, y = "resp_soft", x = "label", w = "transparency",
m = "capability", model = 14, boot = 10000 , modelbt = 1, seed = 654321)
process(data = df_num, y = "liable_soft", x = "label", w = "transparency",
m = "capability", model = 14, boot = 10000 , modelbt = 1, seed = 654321)
process(data = df_num, y = "resp_human", x = "label", w = "transparency",
m = "capability", model = 14, boot = 10000 , modelbt = 1, seed = 654321)
process(data = df_num, y = "liable_human", x = "label", w = "transparency",
m = "capability", model = 14, boot = 10000 , modelbt = 1, seed = 654321)
#===============================================================================
# ANOVA
#================================================================================
anova_rh <- aov(resp_human ~ capability * as.factor(transparency), data = df_comb)
summary(anova_rh)
anova_stats(anova_rh)
summary(anova_rh)
anova_stats(anova_rh)
