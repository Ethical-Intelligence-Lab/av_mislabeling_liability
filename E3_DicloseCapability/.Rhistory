library(dplyr)
library(sjstats)
library(ggpubr)
library(grid)
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects'
)
## read in data:
# set working directory to current directory
d <- read.csv('./data.csv')
## rename variables:
names(d)[names(d) == 'FL_12_DO'] <- 'cond'
names(d)[names(d) == 'resp_human1_10'] <- 'auto_nt_human_r'
names(d)[names(d) == 'resp_software1_10'] <- 'auto_nt_firm_r'
names(d)[names(d) == 'resp_human2_10'] <- 'co_nt_human_r'
names(d)[names(d) == 'resp_software2_10'] <- 'co_nt_firm_r'
names(d)[names(d) == 'liable_human1_1'] <- 'auto_nt_human_l'
names(d)[names(d) == 'liable_firm1_1'] <- 'auto_nt_firm_l'
names(d)[names(d) == 'liab_human2_1'] <- 'co_nt_human_l'
names(d)[names(d) == 'liab_firm2_1'] <- 'co_nt_firm_l'
names(d)[names(d) == 'resp_human3_10'] <- 'auto_ft_human_r'
names(d)[names(d) == 'resp_software3_10'] <- 'auto_ft_firm_r'
names(d)[names(d) == 'resp_human4_10'] <- 'co_ft_human_r'
names(d)[names(d) == 'resp_software4_10'] <- 'co_ft_firm_r'
names(d)[names(d) == 'liab_human3_1'] <- 'auto_ft_human_l'
names(d)[names(d) == 'liab_soft3_1'] <- 'auto_ft_firm_l'
names(d)[names(d) == 'liab_human4_1'] <- 'co_ft_human_l'
names(d)[names(d) == 'liab_software4_1'] <- 'co_ft_firm_l'
## change condition entries
d$cond[d$cond == "FL_35"] <- "auto_nt"
d$cond[d$cond == "FL_36"] <- "co_nt"
d$cond[d$cond == "FL_50"] <- "auto_ft"
d$cond[d$cond == "FL_54"] <- "co_ft"
## subjects randomized:
table(d$cond)
## number of participants BEFORE exclusions:
dim(d)[1] # extracting number of rows only, not columns
## attention exclusions:
# remove responses from data frame that failed attention checks
d <- subset(d, (d$att_1 == 2 & d$att_2 == 2))
dim(d) # number of participants should decrease after attention exclusions
n_original <- dim(d)[1]
## comprehension exclusions:
# remove responses from data frame that failed comprehension checks
d <- subset(d, (d$comp_1 == 2 & d$comp_2 == 4))
dim(d) # number of participants should decrease after comprehension exclusions
d <- subset(d, (d$comp_3 == 2 | d$comp_4 == 1 | d$comp_5 == 2 | d$comp_6 == 1 | d$comp_7 == 1 | d$comp_8 == 1))
dim(d)
## incomplete responses
d <- subset(d, (d$Finished == 1))
dim(d)
## number of participants AFTER exclusions:
n_final <- dim(d)[1] # extracting number of rows only, not columns
n_final
percent_excluded <- (n_original - n_final)/n_original
percent_excluded
table(d$cond)
colnames(d)
d <- d %>% relocate(co_1, .after = auto_1)
d <- d %>% relocate(auto_2, .after = co_1)
d <- d %>% relocate(co_2, .after = auto_2)
d <- d %>% relocate(co_nt_firm_r, .after = auto_nt_firm_r)
d <- d %>% relocate(auto_ft_firm_r, .after = co_nt_firm_r)
d <- d %>% relocate(co_ft_firm_r, .after = auto_ft_firm_r)
d <- d %>% relocate(co_nt_human_r, .after = auto_nt_human_r)
d <- d %>% relocate(auto_ft_human_r, .after = co_nt_human_r)
d <- d %>% relocate(co_ft_human_r, .after = auto_ft_human_r)
d <- d %>% relocate(co_nt_firm_l, .after = auto_nt_firm_l)
d <- d %>% relocate(auto_ft_firm_l, .after = co_nt_firm_l)
d <- d %>% relocate(co_ft_firm_l, .after = auto_ft_firm_l)
d <- d %>% relocate(co_nt_human_l, .after = auto_nt_human_l)
d <- d %>% relocate(auto_ft_human_l, .after = co_nt_human_l)
d <- d %>% relocate(co_ft_human_l, .after = auto_ft_human_l)
## new data frame to extract pre-processed data into:
d_subset <- array(dim=c(dim(d)[1], 6))
colnames(d_subset) <- c('cond','automation','firm_responsibility','human_responsibility','firm_liability','human_liability')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
## extract data of interest from middle part of raw data:
for(i in 1:dim(d)[1]) {
pref1 <- d[i,24:27][!is.na(d[i,24:27])] # for a given row, get only the non-NA values
d_subset[i,2] <- as.numeric(pref1[pref1!= ""]) # and only the non-empty values
resp1 <- d[i,28:31][!is.na(d[i,28:31])]
d_subset[i,3] <- as.numeric(resp1[resp1!= ""])
resp2 <- d[i,32:35][!is.na(d[i,32:35])]
d_subset[i,4] <- as.numeric(resp2[resp2!= ""])
liab1 <- d[i,36:39][!is.na(d[i,36:39])]
d_subset[i,5] <- as.numeric(liab1[liab1!= ""])
liab2 <- d[i,40:43][!is.na(d[i,40:43])]
d_subset[i,6] <- as.numeric(liab2[liab2!= ""])
d_subset[i,1] <- d[i,69][!is.na(d[i,69])]
}
## merge data of interest back with raw data:
# new data frame to work with
d_merged <- cbind(d_subset, d[,52:68])
d_merged$ss <- 1:dim(d_merged)[1]
colnames(d_merged)
## add columns for label and transparency (now renamed as disclosure) condition entries
d_merged$label <- ""
d_merged$transparency <- ""
d_merged$label[d_merged$cond == 'auto_nt'] <- 'auto'
d_merged$label[d_merged$cond == 'auto_ft'] <- 'auto'
d_merged$label[d_merged$cond == 'co_nt'] <- 'co'
d_merged$label[d_merged$cond == 'co_ft'] <- 'co'
d_merged$transparency[d_merged$cond == 'auto_nt'] <- 'no'
d_merged$transparency[d_merged$cond == 'auto_ft'] <- 'yes'
d_merged$transparency[d_merged$cond == 'co_nt'] <- 'no'
d_merged$transparency[d_merged$cond == 'co_ft'] <- 'yes'
## age
mean(d_merged$age, trim = 0, na.rm = TRUE) ## mean age
hist(d_merged$age, main = "Histogram of Age", xlab = "Age")
## gender
table(d_merged$gender)[1]/sum(table(d$gender)) ## percentage of males
table(d_merged$gender)[2]/sum(table(d$gender)) ## percentage of females
barplot(table(d_merged$gender), main = "BarPlot for Gender", names.arg = c("Male","Female","Undisclosed","Other"))
## av knowledge
mean(d_merged$ai_knowledge_1, trim = 0, na.rm = TRUE) ## mean av knowledge
hist(d$ai_knowledge, xlab = 'AI Knowledge', main = 'Histogram of AI Knowledge')
## license
table(d$license)[1]/sum(table(d$license)) ## percentage with driver's license
table(d$license)[2]/sum(table(d$license)) ## percentage without driver's license
barplot(table(d_merged$license), main = "BarPlot for License", names.arg = c("Yes","No"))
cronbach.alpha(d_subset[, c("firm_responsibility","firm_liability")])
cronbach.alpha(d_subset[, c("human_responsibility","human_liability")])
d_merged |>
mutate(
firm = (`firm_responsibility` + `firm_liability`) / 2,
human = (`human_responsibility` + `human_liability`) / 2,
disclosure = transparency
) -> d_merged
# FIRM LIABILITY
## ANOVA
firmliab_mod <- aov(firm ~ as.factor(label) * as.factor(disclosure), data = d_merged)
summary(firmliab_mod)
anova_stats(firmliab_mod)
## t-tests
t1 <- t.test(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'co'], paired = FALSE)
t1
sd(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'auto'])
sd(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
cohen.d(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
t2 <- t.test(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'co'], paired = FALSE)
t2
sd(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'auto'])
sd(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'co'])
cohen.d(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'co'])
# HUMAN LIABILITY
## ANOVA
humaliab_mod <- aov(human ~ as.factor(label) * as.factor(disclosure), data = d_merged)
summary(humaliab_mod)
anova_stats(humaliab_mod)
## t-tests
t1 <- t.test(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'co'], paired = FALSE)
t1
sd(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'auto'])
sd(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
cohen.d(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
t2 <- t.test(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'co'], paired = FALSE)
t2
sd(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'auto'])
sd(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'co'])
cohen.d(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'co'])
## ================================================================================================================
##                                              DATA ANALYSIS - MEDIATION / MODERATED MEDIATION
## ================================================================================================================
source('../process.R')
d_merged$cond_text = d_merged$cond
d_merged$cond = as.factor(d_merged$cond)
d_merged$cond = as.numeric(d_merged$cond)
d_merged$disclosure = as.numeric(as.factor(d_merged$disclosure))
d_merged$label = as.numeric(as.factor(d_merged$label))
process(data = d_merged, y = "human", x = "label",
m =c("automation"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## ================================================================================================================
##                                 Harvard Business School, Ethical Intelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV LABEL STUDY | EXPERIMENT 3 Disclosure
## ================================================================================================================
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
library(ggpubr)
library(dplyr)
library(sjstats)
library(ggpubr)
library(grid)
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects'
)
## ================================================================================================================
##                                                  PRE-PROCESSING
## ================================================================================================================
## read in data:
# set working directory to current directory
d <- read.csv('./data.csv')
## rename variables:
names(d)[names(d) == 'FL_12_DO'] <- 'cond'
names(d)[names(d) == 'resp_human1_10'] <- 'auto_nt_human_r'
names(d)[names(d) == 'resp_software1_10'] <- 'auto_nt_firm_r'
names(d)[names(d) == 'resp_human2_10'] <- 'co_nt_human_r'
names(d)[names(d) == 'resp_software2_10'] <- 'co_nt_firm_r'
names(d)[names(d) == 'liable_human1_1'] <- 'auto_nt_human_l'
names(d)[names(d) == 'liable_firm1_1'] <- 'auto_nt_firm_l'
names(d)[names(d) == 'liab_human2_1'] <- 'co_nt_human_l'
names(d)[names(d) == 'liab_firm2_1'] <- 'co_nt_firm_l'
names(d)[names(d) == 'resp_human3_10'] <- 'auto_ft_human_r'
names(d)[names(d) == 'resp_software3_10'] <- 'auto_ft_firm_r'
names(d)[names(d) == 'resp_human4_10'] <- 'co_ft_human_r'
names(d)[names(d) == 'resp_software4_10'] <- 'co_ft_firm_r'
names(d)[names(d) == 'liab_human3_1'] <- 'auto_ft_human_l'
names(d)[names(d) == 'liab_soft3_1'] <- 'auto_ft_firm_l'
names(d)[names(d) == 'liab_human4_1'] <- 'co_ft_human_l'
names(d)[names(d) == 'liab_software4_1'] <- 'co_ft_firm_l'
## change condition entries
d$cond[d$cond == "FL_35"] <- "auto_nt"
d$cond[d$cond == "FL_36"] <- "co_nt"
d$cond[d$cond == "FL_50"] <- "auto_ft"
d$cond[d$cond == "FL_54"] <- "co_ft"
## subjects randomized:
table(d$cond)
## ================================================================================================================
##                                                   EXCLUSIONS
## ================================================================================================================
## number of participants BEFORE exclusions:
dim(d)[1] # extracting number of rows only, not columns
## attention exclusions:
# remove responses from data frame that failed attention checks
d <- subset(d, (d$att_1 == 2 & d$att_2 == 2))
dim(d) # number of participants should decrease after attention exclusions
n_original <- dim(d)[1]
## comprehension exclusions:
# remove responses from data frame that failed comprehension checks
d <- subset(d, (d$comp_1 == 2 & d$comp_2 == 4))
dim(d) # number of participants should decrease after comprehension exclusions
d <- subset(d, (d$comp_3 == 2 | d$comp_4 == 1 | d$comp_5 == 2 | d$comp_6 == 1 | d$comp_7 == 1 | d$comp_8 == 1))
dim(d)
## incomplete responses
d <- subset(d, (d$Finished == 1))
dim(d)
## number of participants AFTER exclusions:
n_final <- dim(d)[1] # extracting number of rows only, not columns
n_final
percent_excluded <- (n_original - n_final)/n_original
percent_excluded
table(d$cond)
## ================================================================================================================
##                                                    SUBSETTING
## ================================================================================================================
colnames(d)
d <- d %>% relocate(co_1, .after = auto_1)
d <- d %>% relocate(auto_2, .after = co_1)
d <- d %>% relocate(co_2, .after = auto_2)
d <- d %>% relocate(co_nt_firm_r, .after = auto_nt_firm_r)
d <- d %>% relocate(auto_ft_firm_r, .after = co_nt_firm_r)
d <- d %>% relocate(co_ft_firm_r, .after = auto_ft_firm_r)
d <- d %>% relocate(co_nt_human_r, .after = auto_nt_human_r)
d <- d %>% relocate(auto_ft_human_r, .after = co_nt_human_r)
d <- d %>% relocate(co_ft_human_r, .after = auto_ft_human_r)
d <- d %>% relocate(co_nt_firm_l, .after = auto_nt_firm_l)
d <- d %>% relocate(auto_ft_firm_l, .after = co_nt_firm_l)
d <- d %>% relocate(co_ft_firm_l, .after = auto_ft_firm_l)
d <- d %>% relocate(co_nt_human_l, .after = auto_nt_human_l)
d <- d %>% relocate(auto_ft_human_l, .after = co_nt_human_l)
d <- d %>% relocate(co_ft_human_l, .after = auto_ft_human_l)
## new data frame to extract pre-processed data into:
d_subset <- array(dim=c(dim(d)[1], 6))
colnames(d_subset) <- c('cond','automation','firm_responsibility','human_responsibility','firm_liability','human_liability')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
## extract data of interest from middle part of raw data:
for(i in 1:dim(d)[1]) {
pref1 <- d[i,24:27][!is.na(d[i,24:27])] # for a given row, get only the non-NA values
d_subset[i,2] <- as.numeric(pref1[pref1!= ""]) # and only the non-empty values
resp1 <- d[i,28:31][!is.na(d[i,28:31])]
d_subset[i,3] <- as.numeric(resp1[resp1!= ""])
resp2 <- d[i,32:35][!is.na(d[i,32:35])]
d_subset[i,4] <- as.numeric(resp2[resp2!= ""])
liab1 <- d[i,36:39][!is.na(d[i,36:39])]
d_subset[i,5] <- as.numeric(liab1[liab1!= ""])
liab2 <- d[i,40:43][!is.na(d[i,40:43])]
d_subset[i,6] <- as.numeric(liab2[liab2!= ""])
d_subset[i,1] <- d[i,69][!is.na(d[i,69])]
}
## merge data of interest back with raw data:
# new data frame to work with
d_merged <- cbind(d_subset, d[,52:68])
d_merged$ss <- 1:dim(d_merged)[1]
colnames(d_merged)
## add columns for label and transparency (now renamed as disclosure) condition entries
d_merged$label <- ""
d_merged$transparency <- ""
d_merged$label[d_merged$cond == 'auto_nt'] <- 'auto'
d_merged$label[d_merged$cond == 'auto_ft'] <- 'auto'
d_merged$label[d_merged$cond == 'co_nt'] <- 'co'
d_merged$label[d_merged$cond == 'co_ft'] <- 'co'
d_merged$transparency[d_merged$cond == 'auto_nt'] <- 'no'
d_merged$transparency[d_merged$cond == 'auto_ft'] <- 'yes'
d_merged$transparency[d_merged$cond == 'co_nt'] <- 'no'
d_merged$transparency[d_merged$cond == 'co_ft'] <- 'yes'
## ================================================================================================================
##                                            PARTICIPANT CHARACTERISTICS
## ================================================================================================================
## age
mean(d_merged$age, trim = 0, na.rm = TRUE) ## mean age
hist(d_merged$age, main = "Histogram of Age", xlab = "Age")
## gender
table(d_merged$gender)[1]/sum(table(d$gender)) ## percentage of males
table(d_merged$gender)[2]/sum(table(d$gender)) ## percentage of females
barplot(table(d_merged$gender), main = "BarPlot for Gender", names.arg = c("Male","Female","Undisclosed","Other"))
## av knowledge
mean(d_merged$ai_knowledge_1, trim = 0, na.rm = TRUE) ## mean av knowledge
hist(d$ai_knowledge, xlab = 'AI Knowledge', main = 'Histogram of AI Knowledge')
## license
table(d$license)[1]/sum(table(d$license)) ## percentage with driver's license
table(d$license)[2]/sum(table(d$license)) ## percentage without driver's license
barplot(table(d_merged$license), main = "BarPlot for License", names.arg = c("Yes","No"))
## ================================================================================================================
##                                                    Analysis
## ================================================================================================================
cronbach.alpha(d_subset[, c("firm_responsibility","firm_liability")])
cronbach.alpha(d_subset[, c("human_responsibility","human_liability")])
d_merged |>
mutate(
firm = (`firm_responsibility` + `firm_liability`) / 2,
human = (`human_responsibility` + `human_liability`) / 2,
disclosure = transparency
) -> d_merged
# FIRM LIABILITY
## ANOVA
firmliab_mod <- aov(firm ~ as.factor(label) * as.factor(disclosure), data = d_merged)
summary(firmliab_mod)
anova_stats(firmliab_mod)
## t-tests
t1 <- t.test(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'co'], paired = FALSE)
t1
sd(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'auto'])
sd(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
cohen.d(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
t2 <- t.test(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'co'], paired = FALSE)
t2
sd(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'auto'])
sd(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'co'])
cohen.d(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'co'])
# HUMAN LIABILITY
## ANOVA
humaliab_mod <- aov(human ~ as.factor(label) * as.factor(disclosure), data = d_merged)
summary(humaliab_mod)
anova_stats(humaliab_mod)
## t-tests
t1 <- t.test(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'co'], paired = FALSE)
t1
sd(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'auto'])
sd(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
cohen.d(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
t2 <- t.test(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'co'], paired = FALSE)
t2
sd(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'auto'])
sd(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'co'])
cohen.d(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'co'])
## ================================================================================================================
##                                              DATA ANALYSIS - MEDIATION / MODERATED MEDIATION
## ================================================================================================================
source('../process.R')
n_original <- dim(d)[1]
dim(d) # number of participants should decrease after attention exclusions
## comprehension exclusions:
# remove responses from data frame that failed comprehension checks
d <- subset(d, (d$comp_1 == 2 & d$comp_2 == 4))
dim(d) # number of participants should decrease after comprehension exclusions
d <- subset(d, (d$comp_3 == 2 | d$comp_4 == 1 | d$comp_5 == 2 | d$comp_6 == 1 | d$comp_7 == 1 | d$comp_8 == 1))
dim(d)
## age
mean(d_merged$age, trim = 0, na.rm = TRUE) ## mean age
## gender
table(d_merged$gender)[1]/sum(table(d$gender)) ## percentage of males
table(d_merged$gender)[2]/sum(table(d$gender)) ## percentage of females
cronbach.alpha(d_subset[, c("firm_responsibility","firm_liability")])
cronbach.alpha(d_subset[, c("human_responsibility","human_liability")])
d_merged |>
mutate(
firm = (`firm_responsibility` + `firm_liability`) / 2,
human = (`human_responsibility` + `human_liability`) / 2,
disclosure = transparency
) -> d_merged
# FIRM LIABILITY
## ANOVA
firmliab_mod <- aov(firm ~ as.factor(label) * as.factor(disclosure), data = d_merged)
summary(firmliab_mod)
anova_stats(firmliab_mod)
anova_stats(firmliab_mod)
## t-tests
t1 <- t.test(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'co'], paired = FALSE)
t1
## t-tests
### Disclosure Absent
t1 <- t.test(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'co'], paired = FALSE)
t1
sd(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'auto'])
sd(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'co'])
cohen.d(d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'no'& d_merged$label == 'co'])
### Disclosure Present
t2 <- t.test(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'co'], paired = FALSE)
t2
sd(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'auto'])
sd(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
cohen.d(d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$firm[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
# HUMAN LIABILITY
## ANOVA
humaliab_mod <- aov(human ~ as.factor(label) * as.factor(disclosure), data = d_merged)
summary(humaliab_mod)
anova_stats(humaliab_mod)
## t-tests
### Disclosure Absent
t1 <- t.test(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'co'], paired = FALSE)
t1
sd(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'auto'])
sd(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'co'])
cohen.d(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'co'])
t1
cohen.d(d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'no'& d_merged$label == 'co'])
t1
### Disclosure Present
t2 <- t.test(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'co'], paired = FALSE)
t2
sd(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'auto'])
sd(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
cohen.d(d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'auto'],
d_merged$human[d_merged$disclosure == 'yes'& d_merged$label == 'co'])
## ================================================================================================================
##                                              DATA ANALYSIS - MEDIATION / MODERATED MEDIATION
## ================================================================================================================
source('../process.R')
d_merged$cond_text = d_merged$cond
d_merged$cond = as.factor(d_merged$cond)
d_merged$cond = as.numeric(d_merged$cond)
d_merged$disclosure = as.numeric(as.factor(d_merged$disclosure))
d_merged$label = as.numeric(as.factor(d_merged$label))
process(data = d_merged, y = "firm", x = "label",
m =c("automation"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
process(data = d_merged, y = "human", x = "label",
m =c("automation"), model = 4, effsize      = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
process(data = d_merged, y = "firm", x = "label",
m =c("automation"), w = "disclosure", model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
process(data = d_merged, y = "human", x = "label",
m =c("automation"), w = "disclosure",model = 14, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
