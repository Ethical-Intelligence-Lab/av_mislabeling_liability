# Load Packages
library(tidyverse)
library(readxl)
# Load Packages
library(tidyverse)
library(readxl)
setwd("/Users/jho/Dropbox (Harvard University)/Solve Platform Bulk Download/Merged/2023")
# Original Solution Files
df1_2023 <- read_excel("2023/2023 Climate Adaptation Export (Updated).xlsx")
df2_2023 <- read_excel("2023/2023 Financial Inclusion Export (Updated).xlsx")
df3_2023 <- read_excel("2023/2023 Health in Fragile Contexts Export (Updated).xlsx")
#df4_2023 <- read_excel("2023/2023 IndCom Export (Updated).xlsx")
df5_2023 <- read_excel("2023/2023 Learning for Civic Action Export (Updated).xlsx")
df_2023= rbind(df1_2023, df2_2023, df3_2023, df5_2023 )
setwd("/Users/jho/Downloads/Solutions/2023")
# Original Solution Files
df1_2023 <- read_excel("2023/2023 Climate Adaptation Export (Updated).xlsx")
# Original Solution Files
df1_2023 <- read_excel("2023 Climate Adaptation Export (Updated).xlsx")
df2_2023 <- read_excel("2023 Financial Inclusion Export (Updated).xlsx")
df3_2023 <- read_excel("2023 Health in Fragile Contexts Export (Updated).xlsx")
#df4_2023 <- read_excel("2023/2023 IndCom Export (Updated).xlsx")
df5_2023 <- read_excel("2023 Learning for Civic Action Export (Updated).xlsx")
df_2023= rbind(df1_2023, df2_2023, df3_2023, df5_2023 )
View(df_2023)
setwd("/Users/jho/Documents/Embeddings")
write.csv(df_2023, "2023.csv", row.names = F)
library(tidyverse)
df <- read_csv("Embedded.csv")
View(df)
ggplot(df, aes(x=x, y=y, color = Status)) +
geom_point(size = 1) +
theme_light() +
xlab("tsne-x") +
ylab("tsne-y")
ggplot(df, aes(x=x, y=y)) +
geom_point(size = 1) +
theme_light() +
xlab("tsne-x") +
ylab("tsne-y")
ggplot(df, aes(x=x, y=y, color = Challenge)) +
geom_point(size = 1) +
theme_light() +
xlab("tsne-x") +
ylab("tsne-y")
ggplot(df, aes(x=x, y=y, color = Status)) +
geom_point(size = 1) +
theme_light() +
xlab("tsne-x") +
ylab("tsne-y")
View(df)
ggplot(df, aes(x=x_pca, y=y_pca, color = `Similar Industry`)) +
geom_point(size = 1) +
theme_light() +
xlab("pca-x") +
ylab("pca-y")
ggplot(df, aes(x=x_pca, y=y_pca, color = Status)) +
geom_point(size = 1) +
theme_light() +
xlab("pca-x") +
ylab("pca-y")
ggplot(df, aes(x=x, y=y, color = Status)) +
geom_point(size = 1) +
theme_light() +
xlab("tsne-x") +
ylab("tsne-y")
df <- read_csv("Embedded.csv")
ggplot(df, aes(x=x, y=y, color = Status)) +
geom_point(size = 1) +
theme_light() +
xlab("tsne-x") +
ylab("tsne-y")
ggplot(df, aes(x=x_pca, y=y_pca, color = Status)) +
geom_point(size = 1) +
theme_light() +
xlab("pca-x") +
ylab("pca-y")
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Numericize and only include those who finished
df |>
mutate_if(all.is.numeric, as.numeric) |>
filter( Finished == 1) -> df
# ATTENTION CHECKS
n_initial <- nrow(df)
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS
df |>
filter(comp_1 == 2 & comp_2 == 4 ) |>
filter(`comp_3...33` == 3 | `comp_3...28` == 3)-> df
setwd("/Users/jho/Dropbox (Harvard University)/Julian/av_mislabeling_liability/E8_ForceDynamics")
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Numericize and only include those who finished
df |>
mutate_if(all.is.numeric, as.numeric) |>
filter( Finished == 1) -> df
# ATTENTION CHECKS
n_initial <- nrow(df)
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS
df |>
filter(comp_1 == 2 & comp_2 == 4 ) |>
filter(`comp_3...33` == 3 | `comp_3...28` == 3)-> df
n_comprehension <- nrow(df); n_comprehension
auto <- df[,c("auto_verb", "auto_explanation", "auto_magnitude_5", "perceived_automation", "age", "gender")]
co <- df[, c("co_verb", "co_explanation", "co_magnitude_5", "capability_copilot", "age", "gender")]
auto$condition <- "auto"
co$condition <- "co"
column_names <- c("verb", "explanation", "magnitude", "capability", "age", "gender", "condition")
colnames(auto) <- column_names
colnames(co) <- column_names
df <- rbind(auto, co)
rm(auto,co)
# COMPREHENSION CHECKS 3 & 4
df |>
drop_na() -> d
n_comprehension <- nrow(d)
n_attention - n_comprehension
# AGE
mean(as.numeric(d$age), na.rm=T) # filtering the ones who put year
# GENDER
prop_male <- prop.table(table(d$gender))[[1]]; prop_male
d$cause <- ifelse(d$verb == 1, 1, 0)
d$help <- ifelse(d$verb == 2, 1, 0)
d$prevent <- ifelse(d$verb == 3, 1, 0)
table(d$cause, d$condition)
glm(cause ~ condition, d, family = "binomial")
summary(glm(cause ~ condition, d, family = "binomial"))
summary(glm(help ~ condition, d, family = "binomial"))
summary(glm(prevent ~ condition, d, family = "binomial"))
table(d$prevent, d$condition)
table(d$help, d$condition)
table(d$cause, d$condition)
t.test(d[d$condition == "auto",]$magnitude, d[d$condition == "co",]$magnitude)
cor(d$capability, d$magnitude)
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Numericize and only include those who finished
df |>
mutate_if(all.is.numeric, as.numeric) |>
filter( Finished == 1) -> df
# ATTENTION CHECKS
n_initial <- nrow(df)
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS
df |>
filter(comp_1 == 2 & comp_2 == 4 ) |>
filter(`comp_3...33` == 3 | `comp_3...28` == 3)-> df
n_comprehension <- nrow(df); n_comprehension
n_comprehension <- nrow(df); n_comprehension
auto <- df[,c("auto_verb", "auto_explanation", "auto_magnitude_5", "perceived_automation", "age", "gender")]
co <- df[, c("co_verb", "co_explanation", "co_magnitude_5", "capability_copilot", "age", "gender")]
auto$condition <- "auto"
co$condition <- "co"
column_names <- c("verb", "explanation", "magnitude", "capability", "age", "gender", "condition")
colnames(auto) <- column_names
colnames(co) <- column_names
df <- rbind(auto, co)
rm(auto,co)
# COMPREHENSION CHECKS 3 & 4
df |>
drop_na() -> d
n_comprehension <- nrow(d)
n_attention - n_comprehension
# AGE
mean(as.numeric(d$age), na.rm=T) # filtering the ones who put year
# GENDER
prop_male <- prop.table(table(d$gender))[[1]]; prop_male
t.test(d[d$condition == "auto", ]$capability)
t.test(d[d$condition == "auto", ]$capability, d[d$condition == "co", ]$capability)
t.test(d[d$condition == "auto", ]$capability, d[d$condition == "co", ]$capability)
sd(d[d$condition == "auto", ]$capability)
sd(d[d$condition == "co", ]$capability)
## Capability
t.test(d[d$condition == "auto", ]$capability, d[d$condition == "co", ]$capability)
sd(d[d$condition == "auto", ]$capability)
sd(d[d$condition == "co", ]$capability)
cohen.d(d[d$condition == "auto", ]$capability, d[d$condition == "co", ]$capability)
## Choice of verbs
d$cause <- ifelse(d$verb == 1, 1, 0)
d$help <- ifelse(d$verb == 2, 1, 0)
d$prevent <- ifelse(d$verb == 3, 1, 0)
table(d$cause, d$condition)
summary(glm(cause ~ condition, d, family = "binomial"))
summary(glm(factor(cause, levels = c(1,0)) ~ condition, d, family = "binomial"))
summary(glm(factor(cause, levels = c(0,1)) ~ condition, d, family = "binomial"))
summary(glm(factor(cause, levels = c(1,0)) ~ condition, d, family = "binomial"))
summary(glm(cause ~ factor(condition, level = c(1,0)), d, family = "binomial"))
d$condition
d$condition <- as.factor(d$condition)
?as.factor
d$condition <- as.factor(d$condition, levels = c(1,0))
?as.factor
?is.ordered
d$condition <- as.factor(order(d$condition, decreasing = T))
table(d$cause, d$condition)
summary(glm(cause ~ factor(condition, level = c(1,0)), d, family = "binomial"))
summary(glm(cause ~ condition, d, family = "binomial"))
d$condition <- as.factor(conditon)
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Numericize and only include those who finished
df |>
mutate_if(all.is.numeric, as.numeric) |>
filter( Finished == 1) -> df
# ATTENTION CHECKS
n_initial <- nrow(df)
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS
df |>
filter(comp_1 == 2 & comp_2 == 4 ) |>
filter(`comp_3...33` == 3 | `comp_3...28` == 3)-> df
n_comprehension <- nrow(df); n_comprehension
auto <- df[,c("auto_verb", "auto_explanation", "auto_magnitude_5", "perceived_automation", "age", "gender")]
co <- df[, c("co_verb", "co_explanation", "co_magnitude_5", "capability_copilot", "age", "gender")]
auto$condition <- "auto"
co$condition <- "co"
column_names <- c("verb", "explanation", "magnitude", "capability", "age", "gender", "condition")
colnames(auto) <- column_names
colnames(co) <- column_names
df <- rbind(auto, co)
rm(auto,co)
# COMPREHENSION CHECKS 3 & 4
df |>
drop_na() -> d
n_comprehension <- nrow(d)
n_attention - n_comprehension
# AGE
mean(as.numeric(d$age), na.rm=T) # filtering the ones who put year
# GENDER
prop_male <- prop.table(table(d$gender))[[1]]; prop_male
## Capability
t.test(d[d$condition == "auto", ]$capability, d[d$condition == "co", ]$capability)
sd(d[d$condition == "auto", ]$capability)
sd(d[d$condition == "co", ]$capability)
cohen.d(d[d$condition == "auto", ]$capability, d[d$condition == "co", ]$capability)
## Choice of verbs
d$cause <- ifelse(d$verb == 1, 1, 0)
d$help <- ifelse(d$verb == 2, 1, 0)
d$prevent <- ifelse(d$verb == 3, 1, 0)
d$condition <- as.factor(conditon)
table(d$cause, d$condition)
summary(glm(cause ~ condition, d, family = "binomial"))
d$inv_condition <- ifelse(condition == "auto", "_auto", "condition")
d$inv_condition <- ifelse(d$condition == "auto", "_auto", "condition")
summary(glm(cause ~ inv_condition, d, family = "binomial"))
d$inv_condition <- ifelse(d$condition == "auto", "zauto", "auto")
table(d$cause, d$condition)
summary(glm(cause ~ inv_condition, d, family = "binomial"))
## ================================================================================================================
##                                 Harvard Business School, Ethical Intelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV LABEL STUDY | EXPERIMENT 7
## ================================================================================================================
## clear workspace
rm(list = ls())
# options(download.file.method="libcurl")
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
## ================================================================================================================
##                                Exclusions and Pre-processing
## ================================================================================================================
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
# Numericize and only include those who finished
df |>
mutate_if(all.is.numeric, as.numeric) |>
filter( Finished == 1) -> df
# ATTENTION CHECKS
n_initial <- nrow(df)
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS
df |>
filter(comp_1 == 2 & comp_2 == 4 ) |>
filter(`comp_3...33` == 3 | `comp_3...28` == 3)-> df
n_comprehension <- nrow(df); n_comprehension
auto <- df[,c("auto_verb", "auto_explanation", "auto_magnitude_5", "perceived_automation", "age", "gender")]
co <- df[, c("co_verb", "co_explanation", "co_magnitude_5", "capability_copilot", "age", "gender")]
auto$condition <- "auto"
co$condition <- "co"
column_names <- c("verb", "explanation", "magnitude", "capability", "age", "gender", "condition")
colnames(auto) <- column_names
colnames(co) <- column_names
df <- rbind(auto, co)
rm(auto,co)
# COMPREHENSION CHECKS 3 & 4
df |>
drop_na() -> d
n_comprehension <- nrow(d)
n_attention - n_comprehension
## ================================================================================================================
##                                Participants Characteristics
## ================================================================================================================
# AGE
mean(as.numeric(d$age), na.rm=T) # filtering the ones who put year
# GENDER
prop_male <- prop.table(table(d$gender))[[1]]; prop_male
## ================================================================================================================
##                                Analysis
## ================================================================================================================
## Capability
t.test(d[d$condition == "auto", ]$capability, d[d$condition == "co", ]$capability)
sd(d[d$condition == "auto", ]$capability)
sd(d[d$condition == "co", ]$capability)
cohen.d(d[d$condition == "auto", ]$capability, d[d$condition == "co", ]$capability)
## Choice of verbs
d$cause <- ifelse(d$verb == 1, 1, 0)
d$help <- ifelse(d$verb == 2, 1, 0)
d$prevent <- ifelse(d$verb == 3, 1, 0)
d$inv_condition <- ifelse(d$condition == "auto", "zauto", "co")
table(d$cause, d$condition)
summary(glm(cause ~ inv_condition, d, family = "binomial"))
table(d$help, d$condition)
summary(glm(help ~ condition, d, family = "binomial"))
chisq.test(d[d$condition == "auto",]$help, d[d$condition == "co",]$help)
summary(glm(cause ~ inv_condition, d, family = "binomial"))
summary(glm(cause ~ condition, d, family = "binomial"))
summary(glm(cause ~ condition, d, family = "binomial"))
summary(glm(help ~ condition, d, family = "binomial"))
prop.table(table(d$cause, d$condition))
summary(glm(prevent ~ condition, d, family = "binomial"))
prop.table(table(d$cause, d$condition))
prop.table(table(d$help, d$condition))
t.test(d[d$condition == "auto",]$magnitude, d[d$condition == "co",]$magnitude)
## Causal Magnitude
t.test(d[d$condition == "auto",]$magnitude, d[d$condition == "co",]$magnitude)
sd(d[d$condition == "auto", ]$magnitude)
sd(d[d$condition == "co", ]$magnitude)
cohen.d(d[d$condition == "auto", ]$magnitude, d[d$condition == "co", ]$magnitude)
cohen.d(d[d$condition == "auto", ]$magnitude, d[d$condition == "co", ]$magnitude)
## correlation
cor(d$capability, d$magnitude)
