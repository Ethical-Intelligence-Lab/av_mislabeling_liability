##                                              DATA ANALYSIS - MEASURES
## ================================================================================================================
## (1) PERCEIVED USE
#reverse score items: 4
d_merged$reverseCode_use4 <- 100 - d_merged$use4
cronbach.alpha(d_merged[,c("use1", "use2", "use3", "reverseCode_use4")], na.rm = TRUE)
d_merged$use <- rowMeans(d_merged[,c("use1", "use2", "use3", "reverseCode_use4")], na.rm = TRUE)
mean(d_merged$use, trim = 0, na.rm = TRUE)
var(d_merged$use, na.rm = TRUE)
## (2) PERCEIVED VALUE
#excluded: value 4 because it is a price scale
cronbach.alpha(d_merged[,c("value1","value2","value3")], na.rm = TRUE)
d_merged$value <- rowMeans(d_merged[,c("value1","value2","value3")], na.rm = TRUE)
mean(d_merged$value, trim = 0, na.rm = TRUE)
var(d_merged$value, na.rm = TRUE)
## ================================================================================================================
##                                              DATA EXPLORATION - DISTRIBUTIONS
## ================================================================================================================
## PREFERENCE
summary(d_merged$auto)
tapply(d_merged$auto, d_merged$cond, mean)
tapply(d_merged$use, d_merged$cond, mean)
tapply(d_merged$value, d_merged$cond, mean)
tapply(d_merged$value4, d_merged$cond, mean)
## T-TESTS
pairwise_t_test(d_merged, auto ~ cond)
pairwise_t_test(d_merged, use ~ cond)
pairwise_t_test(d_merged, value ~ cond)
pairwise_t_test(d_merged, value4 ~ cond)
## T.test
d1 <- subset(d_merged, d_merged$cond != 'dless')
t.test(auto ~ cond, data = d1)
d2 <- subset(d_merged, d_merged$cond != 'co')
t.test(auto ~ cond, data = d2)
d3 <- subset(d_merged, d_merged$cond != 'auto')
t.test(auto ~ cond, data = d3)
## ================================================================================================================
##                                              PLOTTING MAIN FIGURES
## ================================================================================================================
t_names <- c("Autopilot", "Copilot", "Driverless")
##(1) AUTOMATION LEVEL
p1 <- ggplot(d_merged,aes(x=factor(cond),y=auto)) +
theme_bw() +coord_cartesian(ylim=c(1,6.8))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE, y_position = c(6.5, 6, 6), textsize = 3.5)
p1
p1 <- p1 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names) +
ggtitle("Perceived Level of Automation") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p1
## (2) Perceived Use
p2 <- ggplot(d_merged,aes(x=factor(cond),y=use)) +
theme_bw() +coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE,y_position = c(107, 100, 100), textsize = 3.5)
p2 <- p2 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names)+
ggtitle("Ease of Use") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p2
## (3) Use 1- Rate how easy it is to learn how to drive
p3 <- ggplot(d_merged,aes(x=factor(cond),y=use1)) +
theme_bw() +coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE, y_position = c(107, 100, 100), textsize = 3.5)
p3 <- p3 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names)+
ggtitle("Learn to Drive") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p3
## (4) Use 2- Rate how easy it is to control
p4 <- ggplot(d_merged,aes(x=factor(cond),y=use2)) +
theme_bw() +coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE, y_position = c(107, 100, 100), textsize = 3.5)
p4 <- p4 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names)+
ggtitle("Easy to Control") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p4
## (5) Use 3- Rate how easy it is to understand
p5 <- ggplot(d_merged,aes(x=factor(cond),y=use3)) +
theme_bw() +coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE, y_position = c(107, 100, 100), textsize = 3.5)
p5 <- p5 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names)+
ggtitle("Easy to Understand") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p5
## (6) Use 4- Rate how easy it is to misunderstand/misinterpret
p6 <- ggplot(d_merged,aes(x=factor(cond),y=use4)) +
theme_bw() +coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE, y_position = c(107, 100, 100), textsize = 3.5)
p6 <- p6 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names)+
ggtitle("Easy to Misunderstand") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p6
## (7) Perceived value
p7 <- ggplot(d_merged,aes(x=factor(cond),y=value)) +
theme_bw() +coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE, y_position = c(107, 100, 100), textsize = 3.5)
p7 <- p7 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names)+
ggtitle("Perceived Value") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p7
## (8) Value 1- Rate the quality
p8 <- ggplot(d_merged,aes(x=factor(cond),y=value1)) +
theme_bw() +coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE, y_position = c(107, 100, 100), textsize = 3.5)
p8 <- p8 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names)+
ggtitle("Quality") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p8
## (9) Value 2- Rate how much you would enjoy driving
p9 <- ggplot(d_merged,aes(x=factor(cond),y=value2)) +
theme_bw() +coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE, y_position = c(107, 100, 100), textsize = 3.5)
p9 <- p9 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names)+
ggtitle("Enjoyment") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p9
## (10) Value 3- Rate how much it would improve your social standing/impression
p10 <- ggplot(d_merged,aes(x=factor(cond),y=value3)) +
theme_bw() +coord_cartesian(ylim=c(1,110))+scale_y_continuous(breaks = scales::pretty_breaks(n = 3))+
geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE, y_position = c(107, 100, 100), textsize = 3.5)
p10 <- p10 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names)+
ggtitle("Social Standing Improvement") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p10
## (11) Value 4- Indicate what you think is a fair price
##d_merged$logvalue4 <- log(d_merged$value4)
p11 <- ggplot(d_merged,aes(x=factor(cond),y=value4)) +
theme_bw() + coord_cartesian(ylim=c(10000,115000))+scale_y_continuous(breaks = scales::pretty_breaks(n = 8)) + geom_signif(comparisons = list(c("auto", "dless"),c("auto", "co"),c("co","dless")),map_signif_level=TRUE, y_position = c(107000, 100000, 100000), textsize = 3.5)
p11 <- p11 + theme(text = element_text(size=18),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
scale_x_discrete(labels=t_names)+
ggtitle("Fair Price") +
xlab ("") + ylab ("") +
theme_classic() +
theme(axis.text.x = element_text(size=14)) +
theme(axis.text.y = element_text(size=14)) +
theme(plot.title = element_text(size=16, hjust=0.5, face = "bold")) +
geom_violin(width=0.9, alpha=0.38, size=0.75) +
geom_sina(alpha=0.6, size=0.95, color = "#999999") +
stat_summary(fun.data = "mean_se", color = "black",
size=0.4, fun.args = list(mult = 1),
position = position_dodge(width = 0.9)) +
stat_summary(fun.data = "mean_se", color = "black",
fun.args = list(mult = 1),
position = position_dodge(width = 0.9),
geom="errorbar", width = 0.2)
p11
## ================================================================================================================
dev.new(width=13,height=12,noRStudioGD = TRUE)
png(filename = "culpability_figure1.png", width = 2000,height = 1500, res = 120)
figure1 <- ggarrange(p1, p2, p3, p4, p5, p6, nrow=2,ncol=3,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure1,left = text_grob("Mean", color="black", face ="plain",size=18, rot=90),
bottom = text_grob("Condition", color="black", face ="plain",size=18))
dev.off()
dev.new(width=13,height=12,noRStudioGD = TRUE)
png(filename = "culpability_figure2.png", width = 2000,height = 1500, res = 120)
figure2 <- ggarrange(p7, p8, p9, p10, p11, nrow=2,ncol=3,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure2,left = text_grob("Mean", color="black", face ="plain",size=18, rot=90),
bottom = text_grob("Condition", color="black", face ="plain",size=18))
dev.off()
## ================================================================================================================
## export merged data frame
write.csv(d_merged,"avc_e1_merged.csv")
# BAR PLOTS
d_merged |>
select(cond, auto, use1, use2, use3, use4, value1, value2, value3, value4) -> d_plot
colnames(d_plot) <- c("Condition", "Perceived Automation", "Learn", "Control", "Understand", "Misinterpret", "Quality", "Enjoyment", "Social Standing", "Price")
d <- d_plot
d_plot |>
gather(key = "Measure", value = "Response" , 2:10) |>
mutate(
Condition = case_when(
Condition == "co" ~ "Copilot",
Condition == "auto" ~ "Autopilot",
Condition == "dless" ~ "Driverless",
)
) |>
group_by(Condition, Measure) |>
summarize(
Mean = mean(Response),
SE = sd(Response)/sqrt(n())
) -> d_plot
plot_bar <- function(df=d_plot, dv, y_pos, signif=c("*","*","*"), titulo) {
d_plot <- d_plot |>
filter(Measure == dv)
ggplot(data = d_plot, aes(x=Condition, y=Mean)) +
geom_bar(stat="identity", alpha=.75) +
geom_point(size=.75, color="black") +
geom_errorbar(aes(ymin=Mean-(SE*se_width), ymax=Mean+(SE*se_width)), position = "dodge",
size=.25, color="black", width=.75) +
geom_signif(
y_position = y_pos, xmin = c("Autopilot", "Copilot", "Autopilot"), xmax = c("Copilot", "Driverless", "Driverless"),
annotation = signif, tip_length = 0.1, color='black', size = .25, textsize = 2
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold")) +
ggtitle(titulo) +
ylab("Response") -> p
return(p)
}
plot_bar(dv = "Perceived Automation", y_pos = c(6, 6, 6.5),
signif = c("***", "***", "ns"),
titulo = "Perceived Level of Automation") -> a1
plot_bar(dv = "Misinterpret", y_pos = c(80, 80, 85),
signif = c("**", "**", "ns"),
titulo = "Ease of Misinterpretation") -> a2
ggarrange(a1,a2)
plot_bar <- function(df=d_plot, dv, y_pos, signif=c("*","*","*"), titulo) {
d_plot <- d_plot |>
filter(Measure == dv)
se_width <- 1.96
ggplot(data = d_plot, aes(x=Condition, y=Mean)) +
geom_bar(stat="identity", alpha=.75) +
geom_point(size=.75, color="black") +
geom_errorbar(aes(ymin=Mean-(SE*se_width), ymax=Mean+(SE*se_width)), position = "dodge",
size=.25, color="black", width=.75) +
geom_signif(
y_position = y_pos, xmin = c("Autopilot", "Copilot", "Autopilot"), xmax = c("Copilot", "Driverless", "Driverless"),
annotation = signif, tip_length = 0.1, color='black', size = .25, textsize = 2
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold")) +
ggtitle(titulo) +
ylab("Response") -> p
return(p)
}
plot_bar(dv = "Perceived Automation", y_pos = c(6, 6, 6.5),
signif = c("***", "***", "ns"),
titulo = "Perceived Level of Automation") -> a1
a1
plot_bar <- function(df=d_plot, dv, y_pos, signif=c("*","*","*"), titulo) {
d_plot <- d_plot |>
filter(Measure == dv)
se_width <- 1.96
ggplot(data = d_plot, aes(x=Condition, y=Mean)) +
geom_bar(stat="identity", alpha=.75) +
geom_point(size=.75, color="black") +
geom_errorbar(aes(ymin=Mean-(SE*se_width), ymax=Mean+(SE*se_width)), position = "dodge",
size=.25, color="black", width=.75) +
geom_signif(
y_position = y_pos, xmin = c("Autopilot", "Copilot", "Autopilot"), xmax = c("Copilot", "Driverless", "Driverless"),
annotation = signif, tip_length = 0.1, color='black', size = .25, textsize = 3
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold")) +
ggtitle(titulo) +
ylab("Response") -> p
return(p)
}
plot_bar(dv = "Perceived Automation", y_pos = c(6, 6, 6.5),
signif = c("***", "***", "ns"),
titulo = "Perceived Level of Automation") -> a1
a1
## T.test
d1 <- subset(d_merged, d_merged$cond != 'dless')
t.test(auto ~ cond, data = d1)
summary(t.test(auto ~ cond, data = d1))
t.test(auto ~ cond, data = d1)
sd(d[d$Condition == "co"])
sd(d[d$Condition == "co"],)
sd(d[d$Condition == "co",])
unique(d$Condition)
sd(d[d$Condition == "co",]$`Perceived Automation`)
View(d_merged)
sd(d_merged[d_merged$cond == "dless",]$auto)
sd(d_merged[d_merged$cond == "auto",]$auto)
sd(d_merged[d_merged$cond == "co",]$auto)
setwd("/Users/jho/Dropbox (Harvard University)/av_mislabeling_liability/0_prestudy")
setwd("/Users/jho/Dropbox (Harvard University)/av_mislabeling_liability/0_prestudy")
library(tidyverse)
?read_excel
df <- read_xlsx("ArticleCoding - New York Times.xlsx", sheet = 1, skip = 2)
library(readxl)
df <- read_xlsx("ArticleCoding - New York Times.xlsx", sheet = 1, skip = 2)
df <- read_xlsx("./data/ArticleCoding - New York Times.xlsx", sheet = 1, skip = 2)
View(df)
View(df)
nyt <- read_xlsx("./data/ArticleCoding - New York Times.xlsx", sheet = 1, skip = 2)
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx", sheet = 1, skip = 2)
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx", sheet = 1, skip = 3)
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx", sheet = "Articles", skip = 3)
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx" , skip = 3)
View(usa)
nyt <- read_xlsx("./data/ArticleCoding - New York Times.xlsx", sheet = "Articles", skip = 2)
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx" , skip = 3)
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx")
View(usa)
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx")
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx", sheet = 1, skip = 1)
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx", sheet = 2, skip = 1)
View(usa)
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx", sheet = 2, skip = 3)
View(usa)
wsj <-read_xlsx("./data/ArticleCoding - Wall Street Journal.xlsx", sheet = 1, skip = 2)
View(wsj)
wsj <-read_xlsx("./data/ArticleCoding - Wall Street Journal.xlsx", sheet = 2, skip = 2)
View(wsj)
wapo <- read_xlsx("./data/ArticleCoding - Washington Post.xlsx", sheet = 2, skip = 2)
View(wsj)
colnames(nyt)
View(wapo)
wapo <- read_xlsx("./data/ArticleCoding - Washington Post.xlsx", sheet = 1, skip = 2)
rm(df)
relevant_col <- c("Journal", "Categorization for Coder 1", "Categorization for Coder 2")
nyt <- nyt[,relevant_col]
usa <- usa[, relevant_col]
wapo <- wapo[, relevant_col]
wsj <- wsj[, relevant_col]
colnames(wapo)
colnames(wsj)
wapo_col <- c("Journal", "Categorization for Coder 1...7", "Categorization for Coder 1...8")
View(wsj)
wsj_col <- c("Journal", "Categorization for Coder 1...7", "Categorization for Coder 1...8")
colnames(wsj) <- relevant_col
df <- rbind(nyt, usa, wapo, wsj)
wsj <- wsj[, wsj_col]
View(wsj)
nyt <- read_xlsx("./data/ArticleCoding - New York Times.xlsx", sheet = "Articles", skip = 2)
usa <- read_xlsx("./data/ArticleCoding - USA Today.xlsx", sheet = 2, skip = 3)
wsj <- read_xlsx("./data/ArticleCoding - Wall Street Journal.xlsx", sheet = 2, skip = 2)
wapo <- read_xlsx("./data/ArticleCoding - Washington Post.xlsx", sheet = 1, skip = 2)
relevant_col <- c("Journal", "Categorization for Coder 1", "Categorization for Coder 2")
View(wsj)
View(wsj)
wsj <- wsj[, c(4,7,8)]
nyt <- nyt[,relevant_col]
usa <- usa[, relevant_col]
wapo <- wapo[, relevant_col]
colnames(wsj) <- relevant_col
df <- rbind(nyt, usa, wapo, wsj)
View(df)
?cronbach.alpha
cronbach.alpha(df$`Categorization for Coder 1`, df$`Categorization for Coder 2`)
unique(df$Journal)
cronbach.alpha(df[df$Journal == "New York Times", c(2,3)])
cronbach.alpha(df[df$Journal == "USA Today", c(2,3)])
cronbach.alpha(df[df$Journal == "Washington Post", c(2,3)])
cronbach.alpha(df[df$Journal == "Wall Street Journal", c(2,3)])
colnames(df)
df |>
filter(`Categorization for Coder 1` == `Categorization for Coder 2`)
df |>
filter(`Categorization for Coder 1` == `Categorization for Coder 2`) |>
mutate(
mismarketing = ifelse(`Categorization for Coder 1` == 1, TRUE, FALSE)
) |>
group_by(Journal) |>
summarize( prop = mean(mismarketing) )
df |>
filter(`Categorization for Coder 1` == `Categorization for Coder 2`) |>
mutate(
mismarketing = ifelse(`Categorization for Coder 1` == 1, TRUE, FALSE)
) |>
group_by(Journal) |>
summarize( prop = mean(mismarketing) ) -> prop
View(prop)
nyp <- read_xlsx("./data/ArticleCoding - New York Post.xlsx", sheet = 1, skip = 2)
View(nyp)
nyp <- nyp[, c(5,8,9)]
View(nyp)
colnames(nyp) <- relevant_col
df <- rbind(nyt, usa, wapo, wsj, nyp)
cronbach.alpha(df[df$Journal == "New York Post", c(2,3)])
View(nyp)
df |>
filter(`Categorization for Coder 1` == `Categorization for Coder 2`) |>
mutate(
mismarketing = ifelse(`Categorization for Coder 1` == 1, TRUE, FALSE)
) |>
group_by(Journal) |>
summarize( prop = mean(mismarketing) ) -> prop
View(df)
View(prop)
