geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=10)
) +
geom_signif(
y_position = ypos, xmin = c(1.0), xmax = c(2.0),
annotation = signif, tip_length = 0.1, color='black', size = .25, textsize = 3.5
) +
scale_fill_grey() +
scale_color_grey() +
ggtitle(dv) +
xlab("Marketing Label") +
ylab("Response") -> p
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=10)
) +
scale_fill_grey() +
scale_color_grey() +
ggtitle(dv) +
xlab("Marketing Label") +
ylab("Response") -> p
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=10)
) +
scale_fill_grey() +
scale_color_grey() +
ggtitle("") +
xlab("Marketing Label") +
ylab("Response") -> p
p
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=10)
) +
scale_fill_grey() +
scale_color_grey() +
ggtitle("") +
ylab("Response") -> p
p
df_plot$Var <- c("Affect Premiums", "Increase Risk Estimates")
se_width <- 1.96
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=10)
) +
scale_fill_grey() +
scale_color_grey() +
ggtitle("") +
ylab("Response") -> p
p
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=10)
) +
scale_fill_grey() +
scale_color_grey() +
scale_y_continuous(limits = c(0,100), breaks = c(0,25,50,75,100)) -> p
p
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=10)
) +
scale_fill_grey() +
scale_color_grey() +
scale_y_continuous(limits = c(0,80), breaks = c(0,25,50,75,100)) -> p
p
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=10)
) +
scale_fill_grey() +
scale_color_grey() +
scale_y_continuous(limits = c(0,80), breaks = c(0,25,50,75,100)) +
ylab("Response") +
xlab("") -> p
p
ggsave("insurance_q.pdf", device = "pdf")
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text = element_text(face = "bold")
) +
scale_fill_grey() +
scale_color_grey() +
scale_y_continuous(limits = c(0,80), breaks = c(0,25,50,75,100)) +
ylab("Response") +
xlab("") -> p
p
ggsave("insurance_q.pdf", device = "pdf")
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=15), text = element_text(face = "bold")
) +
scale_fill_grey() +
scale_color_grey() +
scale_y_continuous(limits = c(0,80), breaks = c(0,25,50,75,100)) +
ylab("Response") +
xlab("") -> p
p
ggsave("insurance_q.pdf", device = "pdf")
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=15), text = element_text(face = "bold")
) +
scale_fill_grey() +
scale_color_grey() +
scale_y_continuous(limits = c(0,80), breaks = c(0,25,50,75,100)) +
ylab("Response") +
xlab("") +
ggtitle("Marketing Label and Insurance") -> p
p
ggsave("insurance_q.pdf", device = "pdf")
## ================================================================================================================
##                                 Harvard Business School, Ethical Intelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV LABEL STUDY | EXPERIMENT 6
## ================================================================================================================
## clear workspace
rm(list = ls())
# options(download.file.method="libcurl")
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
## ================================================================================================================
##                                Pre-Processing
## ================================================================================================================
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
df |>
mutate_if(all.is.numeric, as.numeric) -> df
## ================================================================================================================
##                                ANALYSIS
## ================================================================================================================
# Consider the labels
sum(!is.na(df$risk_1))/length(df$risk_1)
df$`Consider Label` <- ifelse(df$risk_1 == 1, "Yes", "No")
table(df$`Consider Label`)
prop.table(table(df$`Consider Label`))
chisq.test(table(df$`Consider Label`), p = c(.5,.5))
# Adjust Risk Estimates
sum(!is.na(df$adjust_4))/length(df$adjust_4)
t.test(df$adjust_4, mu = 50)
sd(df$adjust_4, na.rm = T)
# Increase/Decrease Risk Estimates
sum(!is.na(df$risk_4))/length(df$risk_4)
t.test(df$risk_4, mu = 50)
sd(df$risk_4, na.rm = T)
# Premiums
sum(!is.na(df$premiums_4))/length(df$premiums_4)
#t.test(df$premiums_4, mu = 50)
#sd(df$premiums_4, na.rm = T)
# Advise
sum(!is.na(df$advise_4))/length(df$advise_4)
#t.test(df$advise_4, mu = 50)
#sd(df$advise_4, na.rm = T)
# Reasoning
# minus 2 for n/a and - in response
(sum(!is.na(df$reasoning)) - 2)/length(df$reasoning)
## ================================================================================================================
##                                CODED DATA
## ================================================================================================================
coded <- read_csv('coded_responses.csv')
coded <- coded[!is.na(coded$code),]
c <- paste(coded$code, collapse = ",")
c <- strsplit(c, ",")
table(c)
## ================================================================================================================
##                                TPM
## ================================================================================================================
df |>
drop_na(adjust_4, risk_4) |>
select(adjust_4, risk_4) |>
gather(key = "Var", value = "value", adjust_4, risk_4) |>
group_by(Var) |>
dplyr::summarize(mean = mean(value),
se = sd(value)/sqrt(n())) -> df_plot
df_plot$Var <- c("Affect Premiums", "Increase Risk Estimates")
se_width <- 1.96
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=15), text = element_text(face = "bold")
) +
scale_fill_grey() +
scale_color_grey() +
scale_y_continuous(limits = c(0,80), breaks = c(0,25,50,75,100)) +
ylab("Response") +
xlab("") +
ggtitle("Marketing Label and Insurance") -> p
p
ggsave("insurance_q.pdf", device = "pdf")
## ================================================================================================================
##                                 Harvard Business School, Ethical Intelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV LABEL STUDY | EXPERIMENT 6
## ================================================================================================================
## clear workspace
rm(list = ls())
# options(download.file.method="libcurl")
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
## ================================================================================================================
##                                Pre-Processing
## ================================================================================================================
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
df |>
mutate_if(all.is.numeric, as.numeric) -> df
## ================================================================================================================
##                                ANALYSIS
## ================================================================================================================
# Consider the labels
sum(!is.na(df$risk_1))/length(df$risk_1)
df$`Consider Label` <- ifelse(df$risk_1 == 1, "Yes", "No")
table(df$`Consider Label`)
prop.table(table(df$`Consider Label`))
chisq.test(table(df$`Consider Label`), p = c(.5,.5))
# Adjust Risk Estimates
sum(!is.na(df$adjust_4))/length(df$adjust_4)
t.test(df$adjust_4, mu = 50)
sd(df$adjust_4, na.rm = T)
# Increase/Decrease Risk Estimates
sum(!is.na(df$risk_4))/length(df$risk_4)
t.test(df$risk_4, mu = 50)
sd(df$risk_4, na.rm = T)
# Premiums
sum(!is.na(df$premiums_4))/length(df$premiums_4)
#t.test(df$premiums_4, mu = 50)
#sd(df$premiums_4, na.rm = T)
# Advise
sum(!is.na(df$advise_4))/length(df$advise_4)
#t.test(df$advise_4, mu = 50)
#sd(df$advise_4, na.rm = T)
# Reasoning
# minus 2 for n/a and - in response
(sum(!is.na(df$reasoning)) - 2)/length(df$reasoning)
## ================================================================================================================
##                                CODED DATA
## ================================================================================================================
coded <- read_csv('coded_responses.csv')
coded <- coded[!is.na(coded$code),]
c <- paste(coded$code, collapse = ",")
c <- strsplit(c, ",")
table(c)
## ================================================================================================================
##                                TPM
## ================================================================================================================
df |>
drop_na(adjust_4, risk_4) |>
select(adjust_4, risk_4) |>
gather(key = "Var", value = "value", adjust_4, risk_4) |>
group_by(Var) |>
dplyr::summarize(mean = mean(value),
se = sd(value)/sqrt(n())) -> df_plot
df_plot$Var <- c("Affect Premiums", "Increase Risk Estimates")
se_width <- 1.96
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=15), text = element_text(face = "bold")
) +
scale_fill_grey() +
scale_color_grey() +
scale_y_continuous(limits = c(0,80), breaks = c(0,25,50,75,100)) +
ylab("Response") +
xlab("") +
ggtitle("Marketing Label and Insurance") -> p
p
ggsave("insurance_q.pdf", device = "pdf")
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
## ================================================================================================================
##                                 Harvard Business School, Ethical Intelligence Lab
## ================================================================================================================
##                                DATA ANALYSIS | AV LABEL STUDY | EXPERIMENT 6
## ================================================================================================================
## clear workspace
rm(list = ls())
# options(download.file.method="libcurl")
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
## ================================================================================================================
##                                Pre-Processing
## ================================================================================================================
# Read full dataset
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
df |>
mutate_if(all.is.numeric, as.numeric) -> df
## ================================================================================================================
##                                ANALYSIS
## ================================================================================================================
# Consider the labels
sum(!is.na(df$risk_1))/length(df$risk_1)
df$`Consider Label` <- ifelse(df$risk_1 == 1, "Yes", "No")
table(df$`Consider Label`)
prop.table(table(df$`Consider Label`))
chisq.test(table(df$`Consider Label`), p = c(.5,.5))
# Adjust Risk Estimates
sum(!is.na(df$adjust_4))/length(df$adjust_4)
t.test(df$adjust_4, mu = 50)
sd(df$adjust_4, na.rm = T)
# Increase/Decrease Risk Estimates
sum(!is.na(df$risk_4))/length(df$risk_4)
t.test(df$risk_4, mu = 50)
sd(df$risk_4, na.rm = T)
# Premiums
sum(!is.na(df$premiums_4))/length(df$premiums_4)
#t.test(df$premiums_4, mu = 50)
#sd(df$premiums_4, na.rm = T)
# Advise
sum(!is.na(df$advise_4))/length(df$advise_4)
#t.test(df$advise_4, mu = 50)
#sd(df$advise_4, na.rm = T)
# Reasoning
# minus 2 for n/a and - in response
(sum(!is.na(df$reasoning)) - 2)/length(df$reasoning)
## ================================================================================================================
##                                CODED DATA
## ================================================================================================================
coded <- read_csv('coded_responses.csv')
coded <- coded[!is.na(coded$code),]
c <- paste(coded$code, collapse = ",")
c <- strsplit(c, ",")
table(c)
## ================================================================================================================
##                                TPM
## ================================================================================================================
df |>
drop_na(adjust_4, risk_4) |>
select(adjust_4, risk_4) |>
gather(key = "Var", value = "value", adjust_4, risk_4) |>
group_by(Var) |>
dplyr::summarize(mean = mean(value),
se = sd(value)/sqrt(n())) -> df_plot
df_plot$Var <- c("Affect Premiums", "Increase Risk Estimates")
se_width <- 1.96
ggplot(data = df_plot, aes(x=Var, y=mean)) +
geom_bar(stat="identity", position="dodge", alpha=.75) +
geom_errorbar(aes(ymin=mean-(se*se_width), ymax=mean+(se*se_width)), position = position_dodge(width=.9),
size=.25, color="black", width=.5) +
geom_point(aes(y=mean),position=position_dodge(width = .9), size=.5, color="black") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, face = "bold", size=15), text = element_text(face = "bold")
) +
scale_fill_grey() +
scale_color_grey() +
scale_y_continuous(limits = c(0,80), breaks = c(0,25,50,75,100)) +
ylab("Response") +
xlab("") +
ggtitle("Marketing Label and Insurance") -> p
p
ggsave("insurance_q.pdf", device = "pdf")
coded <- read_csv('coded_responses.csv')
coded <- coded[!is.na(coded$code),]
c <- paste(coded$code, collapse = ",")
c <- strsplit(c, ",")
table(c)
View(coded)
View(coded)
coded <- read_csv('coded_responses.csv')
coded <- coded[!is.na(coded$code),]
c <- paste(coded$code, collapse = ",")
c <- strsplit(c, ",")
table(c)
coded <- read_csv('coded_responses.csv')
coded <- coded[!is.na(coded$code),]
c <- paste(coded$code, collapse = ",")
c <- strsplit(c, ",")
table(c)
coded <- read_csv('coded_responses.csv')
coded <- coded[!is.na(coded$code),]
c <- paste(coded$code, collapse = ",")
c <- strsplit(c, ",")
table(c)
