d[d$benefits == 'Absent',]$firm)
d_process <- d
d_process$label <- as.numeric(as.factor(d_process$label))
d_process$benefits <- as.numeric(as.factor(d_process$benefits))
# FIRM COMBINED
process(data = d_process, y = "firm", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# HUMAN COMBINED
process(data = d_process, y = "human", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# HUMAN
a <- aov(human ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
t1 <- t.test(d[d$benefits == 'Present' & d$label == 'auto',]$human,
d[d$benefits == 'Present' & d$label == 'co',]$human, paired = FALSE)
t1
sd(d[d$benefits == 'Present' & d$label == 'auto',]$human)
sd(d[d$benefits == 'Present' & d$label == 'co',]$human)
cohen.d(d[d$benefits == 'Present' & d$label == 'auto',]$human,
d[d$benefits == 'Present' & d$label == 'co',]$human)
t2 <- t.test(d[d$benefits == 'Absent' & d$label == 'auto',]$human,
d[d$benefits == 'Absent' & d$label == 'co',]$human, paired = FALSE)
t2
sd(d[d$benefits == 'Absent' & d$label == 'auto',]$human)
sd(d[d$benefits == 'Absent' & d$label == 'co',]$human)
cohen.d(d[d$benefits == 'Absent' & d$label == 'auto',]$human,
d[d$benefits == 'Absent' & d$label == 'co',]$human)
t2 <- t.test(d[d$benefits == 'Present',]$human,
d[d$benefits == 'Absent',]$human, paired = FALSE)
t2
sd(d[d$benefits == 'Present',]$human)
sd(d[d$benefits == 'Absent',]$human)
cohen.d(d[d$benefits == 'Present',]$human,
d[d$benefits == 'Absent',]$human)
# HUMAN COMBINED
process(data = d_process, y = "human", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
source('../process.r')
# Read full dataset
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
df |>
mutate_if(all.is.numeric, as.numeric) -> df
# ATTENTION CHECKS
n_initial <- nrow(df)
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS
df |>
filter(comp_1 == 2 & comp_2 == 4) -> df
n_comprehension <- nrow(df); n_comprehension
# Rearranging
df |>
mutate(auto_1 = ifelse(is.na(auto_1), auto_1_ad, auto_1),
co_1 = ifelse(is.na(co_1), co_1_ad, co_1)) -> df
auto <- df[,c("auto_1","ad_1","resp_software1_10","resp_human1_10",
"liable_firm1_1", "liable_human1_1", "comp_3", "age", "gender")]
co <- df[,c("co_1","ad_2","resp_software2_10","resp_human2_10",
"liab_firm2_1", "liab_human2_1", "comp_4", "age", "gender")]
new_colnames <- c("capability", "comp_4", "r_soft", "r_human", "l_firm", "l_human", "comp_3", "age", "gender")
colnames(auto) <- new_colnames
colnames(co) <- new_colnames
auto$label <- "auto"
auto$benefits <- ifelse(is.na(auto$comp_4), "Absent", "Present")
co$label <- "co"
co$benefits <- ifelse(is.na(co$comp_4), "Absent", "Present")
d <- rbind(auto,co)
d <- d[!is.na(d$capability),]
# COMPREHENSION CHECKS 3 & 4
d |>
filter((comp_3 == 2 & label == "auto") | (comp_3 == 1 & label == "co")) -> d
d |>
filter((comp_4 == 1 | is.na(comp_4))) -> d
n_comprehension <- nrow(d)
n_attention - n_comprehension
# AGE
mean(as.numeric(d$age), na.rm=T) # filtering the ones who put year
# GENDER
prop_male <- prop.table(table(d$gender))[[1]]; prop_male
## ================================================================================================================
##                                Analysis
## ================================================================================================================
cronbach.alpha(d[,c("r_soft", "l_firm")])
cronbach.alpha(d[,c("r_human", "l_human")])
# FIRM
a <- aov(firm ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
d$firm <- rowMeans(d[,c("r_soft", "l_firm")])
d$human <- rowMeans(d[,c("r_human", "l_human")])
# FIRM
a <- aov(firm ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
t2 <- t.test(d[d$benefits == 'Absent' & d$label == 'auto',]$firm,
d[d$benefits == 'Absent' & d$label == 'co',]$firm, paired = FALSE)
t2
sd(d[d$benefits == 'Absent' & d$label == 'auto',]$firm)
sd(d[d$benefits == 'Absent' & d$label == 'co',]$firm)
cohen.d(d[d$benefits == 'Absent' & d$label == 'auto',]$firm,
d[d$benefits == 'Absent' & d$label == 'co',]$firm)
### t-tests
t1 <- t.test(d[d$benefits == 'Present' & d$label == 'auto',]$firm,
d[d$benefits == 'Present' & d$label == 'co',]$firm, paired = FALSE)
t1
sd(d[d$benefits == 'Present' & d$label == 'auto',]$firm)
sd(d[d$benefits == 'Present' & d$label == 'co',]$firm)
cohen.d(d[d$benefits == 'Present' & d$label == 'auto',]$firm,
d[d$benefits == 'Present' & d$label == 'co',]$firm)
# Direct Effect of Benefits FIRM
t1 <- t.test(d[d$benefits == 'Present',]$firm,
d[d$benefits == 'Absent',]$firm, paired = FALSE)
t1
sd(d[d$benefits == 'Present',]$firm)
sd(d[d$benefits == 'Absent',]$firm)
cohen.d(d[d$benefits == 'Present',]$firm,
d[d$benefits == 'Absent',]$firm)
# HUMAN
a <- aov(human ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a)
t2 <- t.test(d[d$benefits == 'Absent' & d$label == 'auto',]$human,
d[d$benefits == 'Absent' & d$label == 'co',]$human, paired = FALSE)
t2
sd(d[d$benefits == 'Absent' & d$label == 'auto',]$human)
sd(d[d$benefits == 'Absent' & d$label == 'co',]$human)
cohen.d(d[d$benefits == 'Absent' & d$label == 'auto',]$human,
d[d$benefits == 'Absent' & d$label == 'co',]$human)
t1 <- t.test(d[d$benefits == 'Present' & d$label == 'auto',]$human,
d[d$benefits == 'Present' & d$label == 'co',]$human, paired = FALSE)
t1
sd(d[d$benefits == 'Present' & d$label == 'auto',]$human)
sd(d[d$benefits == 'Present' & d$label == 'co',]$human)
cohen.d(d[d$benefits == 'Present' & d$label == 'auto',]$human,
d[d$benefits == 'Present' & d$label == 'co',]$human)
t2 <- t.test(d[d$benefits == 'Present',]$human,
d[d$benefits == 'Absent',]$human, paired = FALSE)
t2
sd(d[d$benefits == 'Present',]$human)
sd(d[d$benefits == 'Absent',]$human)
cohen.d(d[d$benefits == 'Present',]$human,
d[d$benefits == 'Absent',]$human)
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
source('../process.r')
# Read full dataset
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
df |>
mutate_if(all.is.numeric, as.numeric) -> df
# ATTENTION CHECKS
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS 1 and 2
df |>
filter(comp_1 == 2 & comp_2 == 4) -> df
# Rearranging
df |>
mutate(auto_1 = ifelse(is.na(auto_1), auto_1_ad, auto_1),
co_1 = ifelse(is.na(co_1), co_1_ad, co_1)) -> df
auto <- df[,c("auto_1","ad_1","resp_software1_10","resp_human1_10",
"liable_firm1_1", "liable_human1_1", "comp_3", "age", "gender")]
co <- df[,c("co_1","ad_2","resp_software2_10","resp_human2_10",
"liab_firm2_1", "liab_human2_1", "comp_4", "age", "gender")]
new_colnames <- c("capability", "comp_4", "r_soft", "r_human", "l_firm", "l_human", "comp_3", "age", "gender")
colnames(auto) <- new_colnames
colnames(co) <- new_colnames
auto$label <- "auto"
auto$benefits <- ifelse(is.na(auto$comp_4), "Absent", "Present")
co$label <- "co"
co$benefits <- ifelse(is.na(co$comp_4), "Absent", "Present")
d <- rbind(auto,co)
d <- d[!is.na(d$capability),]
# COMPREHENSION CHECKS 3 & 4
d |>
filter((comp_3 == 2 & label == "auto") | (comp_3 == 1 & label == "co")) -> d
d |>
filter((comp_4 == 1 | is.na(comp_4))) -> d
## For PROCESS
d_process <- d
d_process$label <- as.numeric(as.factor(d_process$label))
d_process$benefits <- as.numeric(as.factor(d_process$benefits))
## Number of Final Participants
n_comprehension <- nrow(d); n_comprehension
## Number excluded
n_attention - n_comprehension
# AGE
mean(d$age)
# AGE
mean(as.numeric(d$age))
?mean
# AGE
mean(as.numeric(d$age), na.rm = T)
# GENDER
prop_male <- prop.table(table(d$gender))[[1]]; prop_male
cronbach.alpha(d[,c("r_soft", "l_firm")])
cronbach.alpha(d[,c("r_human", "l_human")])
d$firm <- rowMeans(d[,c("r_soft", "l_firm")])
d$human <- rowMeans(d[,c("r_human", "l_human")])
# FIRM
a <- aov(firm ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a); anova_stats(a)$partial.etasq
### Absent Condition
t1 <- t.test(d[d$benefits == 'Absent' & d$label == 'auto',]$firm,
d[d$benefits == 'Absent' & d$label == 'co',]$firm, paired = FALSE)
t1
sd(d[d$benefits == 'Absent' & d$label == 'auto',]$firm)
sd(d[d$benefits == 'Absent' & d$label == 'co',]$firm)
cohen.d(d[d$benefits == 'Absent' & d$label == 'auto',]$firm,
d[d$benefits == 'Absent' & d$label == 'co',]$firm)
### Present Condition
t2 <- t.test(d[d$benefits == 'Present' & d$label == 'auto',]$firm,
d[d$benefits == 'Present' & d$label == 'co',]$firm, paired = FALSE)
t2
sd(d[d$benefits == 'Present' & d$label == 'auto',]$firm)
sd(d[d$benefits == 'Present' & d$label == 'co',]$firm)
cohen.d(d[d$benefits == 'Present' & d$label == 'auto',]$firm,
d[d$benefits == 'Present' & d$label == 'co',]$firm)
## Direct effect of advertisement
t3 <- t.test(d[d$benefits == 'Present',]$firm,
d[d$benefits == 'Absent',]$firm, paired = FALSE)
t3
sd(d[d$benefits == 'Present',]$firm)
sd(d[d$benefits == 'Absent',]$firm)
cohen.d(d[d$benefits == 'Present',]$firm,
d[d$benefits == 'Absent',]$firm)
## Simple Mediation
process(data = d_process, y = "firm", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## Simple Mediation
process(data = d_process, y = "firm", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## For PROCESS
d$firm <- rowMeans(d[,c("r_soft", "l_firm")])
d$human <- rowMeans(d[,c("r_human", "l_human")])
d_process <- d
d_process$label <- as.numeric(as.factor(d_process$label))
d_process$benefits <- as.numeric(as.factor(d_process$benefits))
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
source('../process.r')
# Read full dataset
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
df |>
mutate_if(all.is.numeric, as.numeric) -> df
# ATTENTION CHECKS
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS 1 and 2
df |>
filter(comp_1 == 2 & comp_2 == 4) -> df
# Rearranging
df |>
mutate(auto_1 = ifelse(is.na(auto_1), auto_1_ad, auto_1),
co_1 = ifelse(is.na(co_1), co_1_ad, co_1)) -> df
auto <- df[,c("auto_1","ad_1","resp_software1_10","resp_human1_10",
"liable_firm1_1", "liable_human1_1", "comp_3", "age", "gender")]
co <- df[,c("co_1","ad_2","resp_software2_10","resp_human2_10",
"liab_firm2_1", "liab_human2_1", "comp_4", "age", "gender")]
new_colnames <- c("capability", "comp_4", "r_soft", "r_human", "l_firm", "l_human", "comp_3", "age", "gender")
colnames(auto) <- new_colnames
colnames(co) <- new_colnames
auto$label <- "auto"
auto$benefits <- ifelse(is.na(auto$comp_4), "Absent", "Present")
co$label <- "co"
co$benefits <- ifelse(is.na(co$comp_4), "Absent", "Present")
d <- rbind(auto,co)
d <- d[!is.na(d$capability),]
# COMPREHENSION CHECKS 3 & 4
d |>
filter((comp_3 == 2 & label == "auto") | (comp_3 == 1 & label == "co")) -> d
d |>
filter((comp_4 == 1 | is.na(comp_4))) -> d
## For PROCESS
d$firm <- rowMeans(d[,c("r_soft", "l_firm")])
d$human <- rowMeans(d[,c("r_human", "l_human")])
d_process <- d
## clear workspace
rm(list = ls())
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('tidyverse',       # most stuff
'ggsignif',
'grid', # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # Cronbach Alpha
'assertthat',      # allows me to check whether a variable is a string, with is.string
'emmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',        # get Cramer's V
'rstatix',
'effects',
"Hmisc",
"sjstats"
)
source('../process.r')
# Read full dataset
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("data.csv")
# Remove first two rows that were headers
df <- df[-c(1,2),]
df |>
mutate_if(all.is.numeric, as.numeric) -> df
# ATTENTION CHECKS
df |>
filter(att_1 == 2, att_2 == 2) -> df
n_attention <- nrow(df); n_attention
# COMPREHENSION CHECKS 1 and 2
df |>
filter(comp_1 == 2 & comp_2 == 4) -> df
# Rearranging
df |>
mutate(auto_1 = ifelse(is.na(auto_1), auto_1_ad, auto_1),
co_1 = ifelse(is.na(co_1), co_1_ad, co_1)) -> df
auto <- df[,c("auto_1","ad_1","resp_software1_10","resp_human1_10",
"liable_firm1_1", "liable_human1_1", "comp_3", "age", "gender")]
co <- df[,c("co_1","ad_2","resp_software2_10","resp_human2_10",
"liab_firm2_1", "liab_human2_1", "comp_4", "age", "gender")]
new_colnames <- c("capability", "comp_4", "r_soft", "r_human", "l_firm", "l_human", "comp_3", "age", "gender")
colnames(auto) <- new_colnames
colnames(co) <- new_colnames
auto$label <- "auto"
auto$benefits <- ifelse(is.na(auto$comp_4), "Absent", "Present")
co$label <- "co"
co$benefits <- ifelse(is.na(co$comp_4), "Absent", "Present")
d <- rbind(auto,co)
d <- d[!is.na(d$capability),]
# COMPREHENSION CHECKS 3 & 4
d |>
filter((comp_3 == 2 & label == "auto") | (comp_3 == 1 & label == "co")) -> d
d |>
filter((comp_4 == 1 | is.na(comp_4))) -> d
## For PROCESS
d$firm <- rowMeans(d[,c("r_soft", "l_firm")])
d$human <- rowMeans(d[,c("r_human", "l_human")])
d_process <- d
d_process$label <- as.numeric(as.factor(d_process$label))
d_process$benefits <- as.numeric(as.factor(d_process$benefits))
## Number of Final Participants
n_comprehension <- nrow(d); n_comprehension
## Number excluded
n_attention - n_comprehension
# AGE
mean(as.numeric(d$age), na.rm = T)
# GENDER
prop_male <- prop.table(table(d$gender))[[1]]; prop_male
cronbach.alpha(d[,c("r_soft", "l_firm")])
cronbach.alpha(d[,c("r_human", "l_human")])
d$firm <- rowMeans(d[,c("r_soft", "l_firm")])
d$human <- rowMeans(d[,c("r_human", "l_human")])
# FIRM
a <- aov(firm ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a); anova_stats(a)$partial.etasq
### Absent Condition
t1 <- t.test(d[d$benefits == 'Absent' & d$label == 'auto',]$firm,
d[d$benefits == 'Absent' & d$label == 'co',]$firm, paired = FALSE)
t1
sd(d[d$benefits == 'Absent' & d$label == 'auto',]$firm)
sd(d[d$benefits == 'Absent' & d$label == 'co',]$firm)
cohen.d(d[d$benefits == 'Absent' & d$label == 'auto',]$firm,
d[d$benefits == 'Absent' & d$label == 'co',]$firm)
### Present Condition
t2 <- t.test(d[d$benefits == 'Present' & d$label == 'auto',]$firm,
d[d$benefits == 'Present' & d$label == 'co',]$firm, paired = FALSE)
t2
sd(d[d$benefits == 'Present' & d$label == 'auto',]$firm)
sd(d[d$benefits == 'Present' & d$label == 'co',]$firm)
cohen.d(d[d$benefits == 'Present' & d$label == 'auto',]$firm,
d[d$benefits == 'Present' & d$label == 'co',]$firm)
## Direct effect of advertisement
t3 <- t.test(d[d$benefits == 'Present',]$firm,
d[d$benefits == 'Absent',]$firm, paired = FALSE)
t3
sd(d[d$benefits == 'Present',]$firm)
sd(d[d$benefits == 'Absent',]$firm)
cohen.d(d[d$benefits == 'Present',]$firm,
d[d$benefits == 'Absent',]$firm)
## Simple Mediation
process(data = d_process, y = "firm", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# HUMAN
a <- aov(human ~ as.factor(label) * as.factor(benefits), data = d)
summary(a)
anova_stats(a); anova_stats(a)$partial.etasq
## Absent Condition
t1 <- t.test(d[d$benefits == 'Absent' & d$label == 'auto',]$human,
d[d$benefits == 'Absent' & d$label == 'co',]$human, paired = FALSE)
t1
sd(d[d$benefits == 'Absent' & d$label == 'auto',]$human)
sd(d[d$benefits == 'Absent' & d$label == 'co',]$human)
cohen.d(d[d$benefits == 'Absent' & d$label == 'auto',]$human,
d[d$benefits == 'Absent' & d$label == 'co',]$human)
## Present Condition
t2 <- t.test(d[d$benefits == 'Present' & d$label == 'auto',]$human,
d[d$benefits == 'Present' & d$label == 'co',]$human, paired = FALSE)
t2
sd(d[d$benefits == 'Present' & d$label == 'auto',]$human)
sd(d[d$benefits == 'Present' & d$label == 'co',]$human)
cohen.d(d[d$benefits == 'Present' & d$label == 'auto',]$human,
d[d$benefits == 'Present' & d$label == 'co',]$human)
## Direct Effects
t2 <- t.test(d[d$benefits == 'Present',]$human,
d[d$benefits == 'Absent',]$human, paired = FALSE)
t2
sd(d[d$benefits == 'Present',]$human)
sd(d[d$benefits == 'Absent',]$human)
cohen.d(d[d$benefits == 'Present',]$human,
d[d$benefits == 'Absent',]$human)
## Simple Mediation
process(data = d_process, y = "human", x = "label",
m =c("capability"), model = 4, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
